% File: factory.dl
% Date: 04/11/2012
% Author: Fernando Sáenz-Pérez
% Description:
%   Ontology for describing built objects and their parts in a factory that, in particular, builds bicycles.
%   Constraints in the ontology help ontology developers to maintain a consistent instance.
%   The ontology meta-model is based on:
%      F.J. Álvarez, A. Vaquero, and F. Sáenz-Pérez,
%      "Conceptual Modeling of Ontology-based Linguistic Resources with a Focus on Semantic Relations",
%      In Proceedings of the Sixth International Conference on Language Resources and Evaluation (LREC 2008), May, 2008.
%   This Datalog program can be tested on DES (des.sourceforge.net)
%
%   An exclusion property (e.g., irreflexive) attached to a relation forbids the values that the relation can not include
%   An inclusion property (e.g., transitive) attached to a relation intensionally enlarges the relation 
%   with the complete meaning provided by the inclusion property. Example:
%     has_algebraic_property(component_of, transitive) -- This is the attachment
%   If only two entries are in the extensional database:
%     binary_relation(component_of, bearing, wheel).
%     binary_relation(component_of, wheel, bike).
%   Then, the following one, which is required for component_of to be transitive, is intensionally assumed in its meaning:
%     binary_relation(component_of, bearing, bike).
%   So, submitting the following query:
%     DES> binary_relation(X,Y)
%   yields:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ontology Metadata
% c.f. Ontology Data for description
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Concepts
%   - Type constraints:
:- type(concepts(type:string, id:string, arity:integer)).
%   - Primary key constraint:
:- pk(concepts,[id]).
%   - Domain constraints:
:- concepts(Type,Id,Arity), Arity < 0.
:- concepts(Type,Id,Arity), Id \= concept, Id \= relation.

% Binary relations
%   - Type constraints:
:- type(binary_relation(relation:string, fromConcept:string, toConcept:string)).
%   - Primary key constraint:
%:- pk(binary_relation,[relation, fromConcept, toConcept]). % Does not work in DES 2.7, but does in 3.0
%   - Foreign key constraint:
:- fk(binary_relation,[relation],concepts,[id]).
:- fk(binary_relation,[fromConcept],concepts,[id]).
:- fk(binary_relation,[toConcept],concepts,[id]).

% Algebraic properties
%   - Type constraints:
:- type(algebraic_properties(algebraicProperty:string)).
%   - Primary key constraint:
:- pk(algebraic_properties,[algebraicProperty]).

% Has algebraic property
%   - Type constraints:
:- type(has_algebraic_property(relation:string, algebraicProperty:string)).
%   - Primary key constraint:
%:- pk(has_algebraic_property,[relation, algebraicProperty]). % Does not work in DES 2.7, but does in 3.0
%   - Foreign key constraint:
:- fk(has_algebraic_property,[relation],concepts,[id]).
:- fk(has_algebraic_property,[algebraicProperty],algebraic_properties,[algebraicProperty]).

% Violation of irreflexive algebraic property
:- type(irreflexive_violation(binaryRelation:string, fromConcept:string, toConcept:string)).
% As offending tuples can be duplicated, no primary constraint is imposed
% Also, by its definition, only valid domain elements are allowed. No need for further domain constraints

% Violation of asymmetric algebraic property
:- type(asymmetric_violation(binaryRelation:string, fromConcept:string, toConcept:string)).
% As offending tuples can be duplicated, no primary constraint is imposed
% Also, by its definition, only valid domain elements are allowed. No need for further domain constraints


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Semantics of predefined algebraic properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Exclusion Properties
% ====================
%
% Algebraic property "irreflexive"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as an irreflexive relation, fulfilling:
%     |= ~ A -> A
%     Here, -> represents the binary relation, the symbol |= represents logical deducibility, and the symbol ~ represents negation
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   irreflexive(binaryRelation:string, fromConcept:string, toConcept:string), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.id (usual referential integrity constraint)
%     Intensional semantics:
%       irreflexive(BinaryRelation, From, To) :- 
%         not(irreflexive_violation(BinaryRelation, From, To)).
  
irreflexive_violation(BinaryRelation, From, From) :- 
  has_algebraic_property(BinaryRelation, irreflexive),
  binary_relation(BinaryRelation, From, From).

% Algebraic property "asymmetric"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as an asymmetric relation, fulfilling:
%     A -> B , A \= B |= ~ B -> A
%     Here, -> represents the binary relation, \= represents "are not equal", |= represents logical deducibility, and ~ represents negation
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   asymmetric(binaryRelation:string, fromConcept:string, toConcept:string), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.Id (usual referential integrity constraint)
%     Intensional semantics:
%       asymmetric(BinaryRelation, From, To) :-
%         not(asymmetric_violation(BinaryRelation, From, To)).
 
asymmetric_violation(BinaryRelation, From, To) :-
  has_algebraic_property(BinaryRelation, asymmetric),
  binary_relation(BinaryRelation, From, To),
  From \= To,
  binary_relation(BinaryRelation, To, From).


%
% Inclusion Properties
% ====================
%
% Algebraic property "transitive"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as a transitive relation, fulfilling:
%     A -> B, B -> C |= A -> C
%     Here, -> represents the binary relation, and the symbol |= represents logical deducibility
% * Enrollment:
%   - Inclusion constraint
%     This algebraic property sets the values that an instance relation must have, rather than forbidding values
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   transitive(binaryRelation, fromConcept, toConcept), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.id (usual referential integrity constraint)

binary_relation(BinaryRelation, From, To) :- 
  has_algebraic_property(BinaryRelation, transitive),
  binary_relation(BinaryRelation, From, Mid),
  binary_relation(BinaryRelation, Mid, To).

  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constraint Checking
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This part is devoted to examine consistency of the instance ontology w.r.t. ontology constraints, i.e., algebraic properties attached to relations

% The following are strong constraints which are checked whenever any data related to their definition are updated
% Only exclusion properties are checked

:- irreflexive_violation(BinaryRelation, From, To).

:- asymmetric_violation(BinaryRelation, From, To).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ontology Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Metadata relation "concepts":
% * Description:
%   - A relation used in any ontology for describing which are the involved concepts and relations of a ontology instance, i.e., it keeps the metadata about concepts and relations in the ontology. Entries in concepts describe part of the ontology instance
% * Relates:
%   - type: Either a relation or a non-relation concept
%   - id: Concept identifier as its known name
%   - arity: Number of concepts each concept relates. A relation can be n-ary, with n>=2 (no related concepts). A concept has arity 0 as it relates nothing
% * Example(s):
%   - concepts(concept, bike, 0) is used to represent that the identifier "bike" is used to represent the concept "bike"
%   - concepts(relation, component_of, 2) is used to represent that the identifier "component_of" is used to represent a binary relation
% * Formalization:
%   concepts(type:string, id:string, arity:integer), where:
%     type \in {concept,relation}
%     id is an alphanumeric atom
%     arity >=0
% * Instance:
  % Concepts
concepts(concept, bike, 0).
concepts(concept, wheel, 0).
concepts(concept, spoke, 0).
concepts(concept, bearing, 0).
  % Relations
concepts(relation, component_of, 2).

% Metadata relation "binary_relation":
% * Description:
%   - A relation used in any ontology for describing which are the involved binary relations of an ontology instance, i.e., it keeps the metadata about binary relations in the ontology. Entries in binary_relation describe part of the ontology instance
% * Relates:
%   - relation identifier: Concept identifier as used in metadata relation "concepts"
%   - fromConcept identifier: Origin concept identifier in a binary relation as used in metadata relation "concepts"
%   - toConcept identifier: Destination concept identifier in a binary relation as used in metadata relation "concepts"
% * Example(s):
%   - binary_relation(component_of, wheel, bike) is intended to represent the knowledge "wheel is a component of bike"
% * Formalization:
%   binary_relation(relation:string, fromConcept:string, toConcept:string), where:
%     relation, fromConcept, toConcept are alphanumeric atoms
%     relation, fromConcept, toConcept \in concepts.id (usual referential integrity constraint)
% * Instance:
binary_relation(component_of, bearing, wheel).
binary_relation(component_of, spoke, wheel).
binary_relation(component_of, wheel, bike).
%   the next entry is incorrect w.r.t. the algebraic property "irreflexive" attached to "component_of" (as binary_relation(component_of,A,A) is not allowed):
%binary_relation(component_of, wheel, wheel).
%   the next entry is incorrect w.r.t. the algebraic property "asymmetric" attached to "component_of" (as there is already an entry of the form binary_relation(component_of, wheel, bike)):
%binary_relation(component_of, bike, wheel).
%   the next entry is incorrect w.r.t. the set of algebraic properties "asymmetric" and "transitive" attached to "component_of" (as there would be a cyclic path):
%binary_relation(component_of, bike, bearing).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ontology Constraints
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Instance relation "algebraic_properties"
% * Description:
%   - A relation used in any ontology for describing the set of available algebraic properties, which can be attached to relations
% * Relates:
%   - algebraicProperty: A single identifier, which is the name of the algebraic property
% algebraic_properties(algebraicProperty)
% * Example(s):
%   - algebraic_properties(irreflexive) represents that an algebraic property named "irreflexive" is available to be used as an algebraic property of a relation
% * Formalization:
%   algebraic_properties(algebraicProperty:string), where:
%     AlgebraicProperty is an alphanumeric atom
% * Instance:
algebraic_properties(irreflexive).
algebraic_properties(asymmetric).
algebraic_properties(transitive).

% Instance relation "has_algebraic_property"
% * Description:
%   - A relation used in any ontology for describing the algebraic properties attached to relations for an ontology instance
% * Relates:
%   - relation: Concept identifier of the relation
%   - algebraicProperty: Identifier of the algebraic property
% algebraic_properties(AlgebraicProperty)
% * Example(s):
%   - has_algebraic_property(component_of, transitive) represents that the relation "component_of" has attached the algebraic property "transitive"
% * Formalization:
%   has_algebraic_property(relation:string, algebraicProperty:string), where:
%     relation, algebraicProperty are alphanumeric atoms
%     relation \in concepts.id (usual referential integrity constraint)
%     algebraicProperty \in algebraic_properties.algebraicProperty (usual referential integrity constraint)
% * Instance:
has_algebraic_property(component_of, irreflexive).
has_algebraic_property(component_of, asymmetric).
has_algebraic_property(component_of, transitive).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% System Session Example
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

%%%%%%%%%%%%%%%%%%%% START OF SYSTEM SESSION %%%%%%%%%%%%%%%%%%%%%%%
% *********************************************************
% *                                                       *
% *        DES: Datalog Educational System v.2.7          *
% *                                                       *
% *                                                       *
% * Type "/help" for help about commands                  *
% * Type "des." to continue if you get out of DES         *
% *   from a Prolog interpreter                           *
% *                                                       *
% *                    Fernando Saenz-Perez (c) 2004-2012 *
% *                                         GPD DISIA UCM *
% *             Please send comments, questions, etc. to: *
% *                                     fernan@sip.ucm.es *
% *                                             Web site: *
% *                           http://des.sourceforge.net/ *
% *********************************************************


% DES> % First, consult this file


% DES> /consult factory          

% Info: 17 rules consulted.                   
% Info: 17 constraints consulted.

% DES> % Asserting an incorrect entry w.r.t. the algebraic property "irreflexive"

% DES> /assert binary_relation(component_of, wheel, wheel).

% Error: Integrity constraint violation.      
%        ic(BinaryRelation,From,To) :-
%          irreflexive_violation(BinaryRelation,From,To).
%        Offending values in database: [ic(component_of,wheel,wheel)]
% Error: Asserting rules due to integrity constraint violation.

% DES> % Asserting an incorrect entry w.r.t. the algebraic property "asymmetric" 


% DES> /assert binary_relation(component_of, wheel, bearing).

% Error: Integrity constraint violation.      
%        ic(BinaryRelation,From,To) :-
%          irreflexive_violation(BinaryRelation,From,To).
%        Offending values in database: [ic(component_of,wheel,wheel),ic(component_of,bearing,bearing)]
% Error: Asserting rules due to integrity constraint violation.

% DES> % Asserting an incorrect entry w.r.t. the algebraic properties "irreflexive", "asymmetric" and "transitive"

% DES> /assert binary_relation(component_of, bike, bearing). 

% Error: Integrity constraint violation.      
%        ic(BinaryRelation,From,To) :-
%          irreflexive_violation(BinaryRelation,From,To).
%        Offending values in database: [ic(component_of,bearing,bearing),ic(component_of,wheel,wheel),ic(component_of,bike,bike)]
% Error: Asserting rules due to integrity constraint violation.
                                            
% DES> % Note that if you retract the property "transitive", the rule can be asserted indeed


% DES> /retract has_algebraic_property(component_of, transitive).


% DES> /assert binary_relation(component_of, bike, bearing).     


% DES> But if the property is tried to be attached again, an inconsistency error is raised as the database cannot be consisted with such a property


% DES> /assert has_algebraic_property(component_of, transitive).                     

% Error: Integrity constraint violation.      
%        ic(BinaryRelation,From,To) :-
%          irreflexive_violation(BinaryRelation,From,To).
%        Offending values in database: [ic(component_of,bearing,bearing),ic(component_of,wheel,wheel),ic(component_of,bike,bike)]
% Error: Asserting rules due to integrity constraint violation.
