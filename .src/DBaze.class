' Gambas class file

Public store_password As Boolean 'should the password be stored in the file or asked for

Public username As String
Public password As String
Public baze_file As String
Public temporary_folder As String
Public $baze_sqlite As New Connection
Public baze_zodb As ZODBEngine
Public connection_settings As New Collection
Public dbobjects As New Collection
Public js As New JSON

Public Sub init_folder()
  ' create a new temporary folder
  ' dump the JSON connection settings into baze.js
  ' and add a new SQLite file into baze.sqlite
  temporary_folder = Temp()
  Mkdir temporary_folder
  File.Save(temporary_folder &/ "baze.js", contoJSON())
  File.Save(temporary_folder &/ "dbobjects.js", "")
  With $baze_sqlite
    .Type = "sqlite"
    .host = temporary_folder
    .Name = ""
  End With
  $baze_sqlite.Open
  $baze_sqlite.Databases.add("baze.sqlite")
  $baze_sqlite.Close
  baze_zodb = New ZODBEngine(temporary_folder &/ "baze.fs")
  baze_zodb.connect()
  baze_zodb.close()
  Catch
    Message.Info(Error.Text)
End

Public Function contoJSON() As String
  'dump the connection settings to JSON
  Return js.Encode(Me.connection_settings)
End

Public Function dbotoJSON() As String
  'dump the database objects to JSON
  Return js.Encode(Me.dbobjects)
End


Public Sub Save()
  ' zip the temporary files to the baze file
  File.Save(temporary_folder &/ "baze.js", contoJSON())
  File.Save(temporary_folder &/ "dbobjects.js", dbotoJSON())
  Exec ["tar", "cf", baze_file, "-C", temporary_folder, "baze.sqlite", "baze.js", "dbobjects.js", "baze.fs"] Wait
End

Public Sub new_file()
  ' create a temporary folder to store the connection settings and zip it 
  ' into the specified file
  init_folder()
  initialize_dbobjects()
  Save()
End

Public Sub load_file(dbfile As String) As Variant
  ' load a given baze file and return the appropriate DB connection object
  Dim js_content, js_line As String
  Dim js_file As File
  Dim save_password As Boolean
  Dim db As Variant
  Dim please_wait As FormPleaseWait
  temporary_folder = Temp()
  Mkdir temporary_folder
  Exec ["tar", "xf", dbfile, "-C", temporary_folder] Wait
  Try js_file = Open temporary_folder &/ "baze.js" For Input
  If Error Then
    Message.Error("This is not a valid baze file!")
    FMain.Close
    Return
  Endif
  js_content = ""
  While Not Eof(js_file)
    Line Input #js_file, js_line
    js_content &= js_line
  Wend
  connection_settings = js.Decode(js_content)
  Try js_file = Open temporary_folder &/ "dbobjects.js" For Input
  If Error Then
    Message.Error("This is not a valid baze file!")
    FMain.Close
    Return
  Endif
  js_content = ""
  While Not Eof(js_file)
    Line Input #js_file, js_line
    js_content &= js_line
  Wend
  If Len(js_content) = 0 Or Len(js_content) = 2 Then
    initialize_dbobjects()
  Else
    dbobjects = js.Decode(js_content)
  Endif
  
  Select Case connection_settings["connection type"]
    Case "PostgreSQL"
      pgnoconnect:
      If Not connection_settings.Exist("password") Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = False
      Else
        password = connection_settings["password"]
        save_password = True
      Endif
      db = New PostgreSQLDB(
        connection_settings["host"], 
        connection_settings["port"],
        connection_settings["dbname"], 
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      If Not db.connect() Then
        Goto pgnoconnect
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "XSB"
      xsbnoconnect:
      If Not connection_settings.Exist("password") Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = False
      Else
        password = connection_settings["password"]
        save_password = True
      Endif
      db = New XSBDB(
        connection_settings["dsn"],
        connection_settings["username"], 
        password, 
        save_password,
        connection_settings["xsb"])
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      please_wait = New FormPleaseWait
      please_wait.db = db
      please_wait.silent = True
      please_wait.ShowModal
      If Not db.con.opened Then
        Goto xsbnoconnect
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBEmbedded"
      db = New ZODBEmbedded(connection_settings["dbfile"])
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        'Goto zodbembnoconnect
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBFileStorage"
      db = New ZODBFileStorage(connection_settings["dbfile"]) 
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBClientStorage"
      zodbnoconnect:
      If Not connection_settings.Exist("password") Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = False
      Else
        password = connection_settings["password"]
        save_password = True
      Endif
      db = New ZODBClientStorage(
        connection_settings["host"],
        connection_settings["port"],
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        Goto zodbnoconnect
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "eXist"
      exnoconnect:
      If Not connection_settings.Exist("password") Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = False
      Else
        password = connection_settings["password"]
        save_password = True
      Endif
      db = New EXistDB(
        connection_settings["host"], 
        connection_settings["port"],
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      If Not db.connect() Then
        Goto exnoconnect
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    End Select
End

Public Sub initialize_dbobjects()
  ' initialize dbobjects
  Me.dbobjects["queries"] = New Collection
  Me.dbobjects["queries"]["insert queries"] = New Collection
  Me.dbobjects["queries"]["delete queries"] = New Collection
  
  Me.dbobjects["forms"] = New Collection
  Me.dbobjects["scripts"] = New Collection
  Me.dbobjects["reports"] = New Collection
  Select Case connection_settings["connection type"]
    Case "PostgreSQL"
      Me.dbobjects["queries"]["sql queries"] = New Collection
      Me.dbobjects["queries"]["qbe queries"] = New Collection
      Me.dbobjects["queries"]["update queries"] = New Collection
    Case "XSB"
      Me.dbobjects["queries"]["sql queries"] = New Collection
      Me.dbobjects["queries"]["datalog queries"] = New Collection
      Me.dbobjects["datalog modules"] = New Collection
    Case "ZODBEmbedded", "ZODBClientStorage", "ZODBFileStorage"
      Me.dbobjects["queries"]["pymapreduce queries"] = New Collection
      Me.dbobjects["class definitions"] = New Collection
      Me.dbobjects["modules"] = New Collection
    Case "eXist"
      Me.dbobjects["queries"]["replace queries"] = New Collection
      Me.dbobjects["queries"]["value queries"] = New Collection
      Me.dbobjects["queries"]["rename queries"] = New Collection
      Me.dbobjects["queries"]["xpath queries"] = New Collection
      Me.dbobjects["queries"]["xpath queries paths"] = New Collection
      Me.dbobjects["queries"]["xquery queries"] = New Collection
  End Select
End

Public Sub delete_query(query As String)
  ' delete the query and refresh
  Dim a As String
  Dim o As Collection
  For Each o In Me.dbobjects["queries"]
    For Each a In o
      If o.key = query Then
        o[o.key] = Null
        Me.Save
        Return
      Endif
    Next
  Next
End


