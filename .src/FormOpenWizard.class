' Gambas class file

' holds the filename to be opened
Public openfile As String
' are there recently opened files
Public hasrecent As Boolean
' store the database type
Public dbtype As String
' path to XSB inbox
Public xsb_exe As String
' path to ZODB file storage inbox
Public zodb_fs As String
' semaphore for events
Public stop_event As Boolean
' last shown index
Public last_index As Integer

Public Sub Form_Open()
  Dim setting As String
  Dim helper As String[]
  Dim xsb, flora2, save_shell As String
  stop_event = False
  last_index = 0
  ' set return value to canceled in case the user clicks the x button
  FMain.wizard_return = "canceled"
  ' default new DB is SQLite
  ComboBoxNewDatabase.Index = 0
  ' check if there are recent files in stored settings and get the last six
  hasrecent = True
  dbtype = ""
  save_shell = System.Shell
  System.Shell = "/bin/bash"
  Shell "which xsb" To xsb 
  If xsb Then
    TextBoxXXSB.Text = Left$(xsb, -1)
  Endif
  Shell "which flora2" To flora2 
  If flora2 Then
    TextBoxfflora2.Text = Left$(flora2, -1)
  Endif
  Shell "which runflora" To flora2 
  If flora2 Then
    TextBoxfflora2.Text = Left$(flora2, -1)
  Endif
  System.Shell = save_shell
  setting = Settings["FormOpenWizard/first"]
  helper = Split(setting, "/")
  Try setting = helper[helper.Count - 1] & " (" & setting & ")"
  If setting <> "" Then
    ListViewRecent.Add("first", setting)
    setting = Settings["FormOpenWizard/second"]
    helper = Split(setting, "/")
    Try setting = helper[helper.Count - 1] & " (" & setting & ")"
    If setting <> "" Then
      ListViewRecent.Add("second", setting)
      setting = Settings["FormOpenWizard/third"]
      helper = Split(setting, "/")
      Try setting = helper[helper.Count - 1] & " (" & setting & ")"
      If setting <> "" Then
        ListViewRecent.Add("third", setting)
        setting = Settings["FormOpenWizard/fourth"]
        helper = Split(setting, "/")
        Try setting = helper[helper.Count - 1] & " (" & setting & ")"
        If setting <> "" Then
          ListViewRecent.Add("fourth", setting)
          setting = Settings["FormOpenWizard/fifth"]
          helper = Split(setting, "/")
          Try setting = helper[helper.Count - 1] & " (" & setting & ")"
          If setting <> "" Then
            ListViewRecent.Add("fifth", setting)
            setting = Settings["FormOpenWizard/sixth"]
            helper = Split(setting, "/")
            Try setting = helper[helper.Count - 1] & " (" & setting & ")"
            If setting <> "" Then
              ListViewRecent.Add("sixth", setting)
            Endif
          Endif
        Endif
      Endif
    Endif
    Else
      hasrecent = False
  Endif
  load_odbc_dsn()
End

Private Sub load_odbc_dsn()
  ' parse /etc/odbc.ini and put the DSNs into the appropriate comboboxes
  Dim odbc_ini As File
  Dim txt As String
  Dim tline As String
  Dim DSNs As String[]
  Dim dsn As String
  Try odbc_ini = Open "/etc/odbc.ini" For Input
  If Error Then
    Message.Error("Cannot find odbc.ini file in /etc! Please install unixODBC")
    Return
  Endif
  txt = ""
  While Not Eof(odbc_ini)
    Line Input #odbc_ini, tLine
    txt &= tLine
  Wend
  DSNs = XSBEngine.FindAll(txt, "\\[([^\\]]+)\\]", 1) 
  DSNs = DSNs.Sort(gb.IgnoreCase)
  For Each dsn In DSNs
    ComboBoxXDSN.Add(dsn, ComboBoxXDSN.Count)
    ComboBoxfDSN.Add(dsn, ComboBoxXDSN.Count)
  Next
End


Public Sub WizardIntro_Change()
  ' check which option was selected (new, open, connection)
  ' if new or open show the main frame
  ' else show the appropriate connection settings wizard
  Dim selected As String
  Dim db As Variant
  Dim please_wait As FormPleaseWait
  Dim i As Integer
  'Stop Event
  If RadioButtonNew.Value Then ' create a new baze
    FMain.new_db_type = ComboBoxNewDatabase.Text
    FMain.wizard_return = "new" 'TODO: add another return value with the new db type (SQLite or ZODB)
    Me.Close
  Else
    If RadioButtonOpen.Value Then ' open an existing baze
      If openfile = "" Then
        Message.Error("Please choose a file to open!", "OK")
      Else
        FMain.wizard_return = openfile
        Me.Close
      Endif
    Else ' connect to a database
      If RadioButtonConnect.Value Then
        If dbtype <> "" And last_index < WizardIntro.Index Then ' a database type has already been selected, connect to it
          FMain.connection_settings = New Collection
          Select Case dbtype
            Case "PostgreSQL"
              FMain.connection_settings["host"] = TextBoxPGHost.Text
              FMain.connection_settings["port"] = TextBoxPGPort.Text
              FMain.connection_settings["username"] = TextBoxPGUsername.Text
              FMain.connection_settings["password"] = TextBoxPGPassword.Text
              FMain.connection_settings["dbname"] = TextBoxPGDBName.Text
              FMain.connection_settings["store password"] = CheckBoxPGStoreP.Value
              db = New PostgreSQLDB(TextBoxPGHost.Text, TextBoxPGPort.Text, TextBoxPGDBName.Text, TextBoxPGUsername.Text, TextBoxPGPassword.Text, CheckBoxPGStoreP.Value)
              FMain.connection_settings["connection"] = db
            Case "XSB"
              FMain.connection_settings["dsn"] = ComboBoxXDSN.Text
              FMain.connection_settings["username"] = TextBoxXUsername.Text
              FMain.connection_settings["password"] = TextBoxXPassword.Text
              FMain.connection_settings["xsb"] = TextBoxXXSB.Text
              FMain.connection_settings["store password"] = CheckBoxXStoreP.Value
              db = New XSBDB(ComboBoxXDSN.Text, TextBoxXUsername.Text, TextBoxXPassword.Text, CheckBoxXStoreP.Value, TextBoxXXSB.Text)
              FMain.connection_settings["connection"] = db
              Me.Close
            Case "Flora2"
              FMain.connection_settings["dsn"] = ComboBoxfDSN.Text
              FMain.connection_settings["username"] = TextBoxfUsername.Text
              FMain.connection_settings["password"] = TextBoxfPassword.Text
              FMain.connection_settings["flora2"] = TextBoxfflora2.Text
              FMain.connection_settings["store password"] = CheckBoxfStoreP.Value
              db = New Flora2DB(ComboBoxfDSN.Text, TextBoxfUsername.Text, TextBoxfPassword.Text, CheckBoxfStoreP.Value, TextBoxfflora2.Text)
              FMain.connection_settings["connection"] = db
            Case "ZODB"
              Select Case ComboBoxZStorageType.Text
                Case "Embedded"
                  FMain.connection_settings["connection type"] = "ZODBEmbedded"
                  FMain.connection_settings["dbfile"] = "baze.fs"
                  db = New ZODBEmbedded("baze.fs")
                  FMain.connection_settings["connection"] = db
                Case "Client storage"
                  FMain.connection_settings["connection type"] = "ZODBClientStorage"
                  FMain.connection_settings["server"] = TextBoxZHost.Text
                  FMain.connection_settings["port"] = TextBoxZPort.Text
                  FMain.connection_settings["username"] = TextBoxZUsername.Text
                  If CheckBoxZStoreP.Value Then
                    FMain.connection_settings["password"] = TextBoxZPassword.Text
                  Endif
                  db = New ZODBClientStorage(TextBoxZHost.Text, TextBoxZPort.Text, TextBoxZUsername.Text, TextBoxZPassword.Text, CheckBoxZStoreP.Value)
                  FMain.connection_settings["connection"] = db
                Case "File storage"
                  FMain.connection_settings["connection type"] = "ZODBFileStorage"
                  FMain.connection_settings["dbfile"] = TextBoxZDBFile.Text
                  db = New ZODBFileStorage(TextBoxZDBFile.Text)
                  FMain.connection_settings["connection"] = db
              End Select
            Case "eXist"
              FMain.connection_settings["host"] = TextBoxEHost.Text
              FMain.connection_settings["port"] = TextBoxEPort.Text
              FMain.connection_settings["username"] = TextBoxEUsername.Text
              If CheckBoxEStoreP.Value Then
                FMain.connection_settings["password"] = TextBoxEPassword.Text
              Endif
              db = New EXistDB(TextBoxEHost.Text, TextBoxEPort.Text, TextBoxEUsername.Text, TextBoxEPassword.Text, CheckBoxEStoreP.Value)
              FMain.connection_settings["connection"] = db
            Case "CouchDB"
              If Not stop_event Then
                stop_event = True
                WizardIntro[6].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "SQLite"
              If Not stop_event Then
                stop_event = True
                WizardIntro[7].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
          End Select
          If dbtype = "XSB" Then
            please_wait = New FormPleaseWait
            please_wait.db = db
            please_wait.silent = True
            please_wait.ShowModal
          Else
            FMain.db = db
            If db.connect() Then
              Me.Close
            Endif
          Endif
        Else
          dbtype = ""
          selected = ""
        Endif
        If last_index > WizardIntro.Index Then
          WizardIntro[0].show
        Else
          FMain.wizard_return = "connection"
          selected = ComboBoxDBTypes.Current.Text
          dbtype = selected
          For i = 0 To WizardIntro.Count - 1 
            WizardIntro[i].Hide
          Next
          Select Case selected ' show the appropriate menu
            Case ""
              If Not stop_event Then
                stop_event = True
                WizardIntro[0].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
              Message.Error("Please select a database type!", "OK")
            Case "PostgreSQL"
              If Not stop_event Then
                stop_event = True
                WizardIntro[1].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "XSB"
              If Not stop_event Then
                stop_event = True
                WizardIntro[2].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "Flora2"
              If Not stop_event Then
                stop_event = True
                WizardIntro[3].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "ZODB"
              If Not stop_event Then
                stop_event = True
                WizardIntro[4].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "eXist"
              If Not stop_event Then
                stop_event = True
                WizardIntro[5].show
                last_index = WizardIntro.Index
                stop_event = False             
              Endif
            Case "CouchDB"
              If Not stop_event Then
                stop_event = True
                WizardIntro[6].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
            Case "SQLite"
              If Not stop_event Then
                stop_event = True
                WizardIntro[7].show
                last_index = WizardIntro.Index
                stop_event = False
              Endif
          End Select
        Endif
      Endif
    Endif
  Endif
End

Public Sub WizardIntro_Cancel()
  ' catch the cancel event and set the return variable to canceled
  ' to prevent showing the main frame
  FMain.wizard_return = "canceled"
  Me.Close
End

Public Sub ToolButtonOpen_Click()
  ' open the file chooser 
  Dim op As New FormOpenFile
  op.caller = Me
  op.ShowModal
  LabelChosenFile.Text = openfile
End

Public Sub RadioButtonNew_Click()
  ' if new radio is clicked disable the other two
  toggle_open(False)
  toggle_connect(False)
  toggle_new(True)
End

Public Sub toggle_new(value As Boolean)
  ' toggle the new database combobox
  ComboBoxNewDatabase.Enabled = value  
End

Private Sub toggle_open(value As Boolean)
  ' if open radio is clicked disable the other two
  ' take care that recent files remain disabled
  ' if there are no recent files in settings
  LabelRecent.Enabled = value
  LabelOther.Enabled = value
  LabelChosenFile.Enabled = value
  If Not value Then
    ListViewRecent.Enabled = value
  Else
    ListViewRecent.Enabled = hasrecent
  Endif
  ToolButtonOpen.Enabled = value
End

Private Sub toggle_connect(value As Boolean)
  ' toggle all controls in the connect radio
  LabelDBType.Enabled = value
  ComboBoxDBTypes.Enabled = value
  ComboBoxDBTypes.Index = 1
End



Public Sub RadioButtonOpen_Click()
  ' toggle all controls in the open radio
  toggle_connect(False)
  toggle_open(True)
  toggle_new(False)
End

Public Sub RadioButtonConnect_Click()
  ' if connect radio is clicked disable the other two
  toggle_open(False)
  toggle_connect(True)
  toggle_new(False)
End

Public Sub ListViewRecent_Click()
  ' if recent file is selected update the file to be opened variable
  Dim s As String
  s = ListViewRecent.Current.Text
  openfile = XSBEngine.FindAll(s, "\\((.*)\\)", 1)[0]
End

Public Sub ComboBoxZStorageType_Click()

  If ComboBoxZStorageType.Text = "Client storage" Then
    LabelZHost.Enabled = True
    LabelZPort.Enabled = True
    TextBoxZHost.Enabled = True
    TextBoxZPort.Enabled = True
    LabelZDBFile.Enabled = False
    TextBoxZDBFile.Enabled = False
    TextBoxZUsername.Enabled = True
    TextBoxZPassword.Enabled = True
    LabelZUsername.Enabled = True
    LabelZPassword.Enabled = True
    CheckBoxZStoreP.Enabled = True
    ToolButtonFindZDBFile.Enabled = False
  Else
    If ComboBoxZStorageType.Text = "File storage" Then
      LabelZHost.Enabled = False
      LabelZPort.Enabled = False
      TextBoxZHost.Enabled = False
      TextBoxZPort.Enabled = False
      LabelZDBFile.Enabled = True
      TextBoxZDBFile.Enabled = True
      TextBoxZUsername.Enabled = False
      TextBoxZPassword.Enabled = False
      LabelZUsername.Enabled = False
      LabelZPassword.Enabled = False
      CheckBoxZStoreP.Enabled = False
      ToolButtonFindZDBFile.Enabled = True
    Else
      LabelZHost.Enabled = False
      LabelZPort.Enabled = False
      TextBoxZHost.Enabled = False
      TextBoxZPort.Enabled = False
      LabelZDBFile.Enabled = False
      TextBoxZDBFile.Enabled = False
      TextBoxZUsername.Enabled = False
      TextBoxZPassword.Enabled = False
      LabelZUsername.Enabled = False
      LabelZPassword.Enabled = False
      CheckBoxZStoreP.Enabled = False
      ToolButtonFindZDBFile.Enabled = False
    Endif
  Endif
End

Public Sub ButtonPGTest_Click()
  ' test the PostreSQL connection
  Dim db As New PostgreSQLDB(TextBoxPGHost.Text, TextBoxPGPort.Text, TextBoxPGDBName.Text, TextBoxPGUsername.Text, TextBoxPGPassword.Text, CheckBoxPGStoreP.Value)
  
  If db.connect() Then
    Message.Info("Connection succesfull!")
  Endif
End

Public Sub ButtonXTest_Click()
  ' test the XSB connection
  Dim db As New XSBDB(ComboBoxXDSN.Text, TextBoxXUsername.Text, TextBoxXPassword.Text, CheckBoxXStoreP.Value, TextBoxXXSB.Text) 
  Dim please_wait As New FormPleaseWait
  please_wait.db = db
  please_wait.ShowModal
End

Public Sub ToolButtonFindXSB_Click()
  ' show form to find XSB executable
  FormFindXSB.ShowModal()
  TextBoxXXSB.Text = xsb_exe
End

Public Sub ToolButtonFindZDBFile_Click()
  ' show form to find ZODB file storage
  Dim find_fs As New FormFindZODBFileStorage
  find_fs.caller = Me
  find_fs.ShowModal()
  TextBoxZDBFile.Text = zodb_fs
End

Public Sub ButtonETest_Click()
  Dim db As New EXistDB(TextBoxEHost.Text, TextBoxEPort.Text, TextBoxEUsername.Text, TextBoxEPassword.Text, CheckBoxEStoreP.Value)
  If db.connect() Then
    Message.Info("Connection successful!")
  Else
    Message.Error("Error connecting to eXist server!")
  Endif
End

Public Sub ToolButtonFindFlora2_Click()
  ' find the Flora2 executable (runflora or flora2)
  Dialog.Title = "Please find the Flora2 executable (runflora or flora2)"
  Dialog.Filter = ["runflora", "Flora executable", "flora2", "Flora executable"]
  If Dialog.OpenFile() Then
    Return
  Endif
  TextBoxfflora2.Text = Dialog.Path
End

Public Sub ButtonfTest_Click()
  ' try to connect to Flora2
  Dim db As New Flora2DB(ComboBoxfDSN.Text, TextBoxfUsername.Text, TextBoxfPassword.Text, CheckBoxfStoreP.Value, TextBoxfflora2.Text)
  If db.connect() Then
    Message.Info("Connection successful!")
  Else
    Message.Error("Error connecting to Flora2 database!")
  Endif
End

Public Sub ButtonCTest_Click()
  ' try to connect to couch db
  Dim db As New CouchDB(TextBoxCHost.Text, TextBoxCPort.Text, TextBoxCUsername.Text, TextBoxCPassword.Text, CheckBoxCStoreP.Value)
  If db.connect() Then
    Message.Info("Connection successful!")
  Else
    Message.Error("Error connecting to CouchDB!")
  Endif
End
