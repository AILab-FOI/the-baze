' Gambas class file

Public table_name As String
Public attributes As New String[]
Public datatypes As New String[]
Public descriptions As New String[]
Public constraints As New Collection[]
Public table_constraints As New Collection
Public options As New Collection[]

Public Sub add_attribute(name As String, datatype As String, description As String)
  ' create a new attribute
  Dim c, o As New Collection
  attributes.Add(name)
  datatypes.Add(datatype)
  descriptions.Add(description)
  constraints.Add(c)
  options.Add(o)
End

Public Sub change_attribute(a_index As Integer, new_name As String, new_datatype As String, new_description As String)
  ' change the attribute under the given index
  If a_index > attributes.Count - 1 Then
    add_attribute(new_name, new_datatype, new_description)
  Else
    attributes[a_index] = new_name
    datatypes[a_index] = new_datatype
    descriptions[a_index] = new_description
  Endif
End

Public Sub change_not_null_constraint(a_index As Integer, not_null As Boolean)
  ' change not null constraint on a given attribute index
  constraints[a_index]["not null"] = not_null
End

Public Sub change_unique_constraint(a_index As Integer, unique As Boolean)
  ' change unique constraint on a given attribute index
  constraints[a_index]["unique"] = unique
End


Public Sub change_primary_key_constraint(a_index As Integer, primary_key As Boolean)
  ' change primary key constraint on a given attribute index
  constraints[a_index]["primary key"] = primary_key
End

Public Sub change_check_constraint(a_index As Integer, check As Boolean, Optional check_expression As String)
  ' change check constraint on a given attribute index
  constraints[a_index]["check"] = check
  If check Then
    constraints[a_index]["check formula"] = check_expression
  Endif
End

Public Sub change_references_constraint(a_index As Integer, references As Boolean, Optional reference As String, Optional onDelete As String, Optional onUpdate As String)
  ' change check constraint on a given attribute index
  constraints[a_index]["references"] = references
  If references Then
    constraints[a_index]["referenced table"] = reference
    constraints[a_index]["on delete"] = onDelete
    constraints[a_index]["on update"] = onUpdate
  Endif
End

Public Sub change_default_constraint(a_index As Integer, default_ As Boolean, Optional default_value As String)
  ' change check constraint on a given attribute index
  constraints[a_index]["default"] = default_
  If default_ Then
    constraints[a_index]["default value"] = default_value
  Endif
End

Public Sub change_table_primary_key_constraint(primary_key As Boolean, keys As String[])
  ' change a multiple primary key constraint
  table_constraints["primary key"] = primary_key
  If primary_key Then
    table_constraints["primary keys"] = keys
  Endif
End

Public Sub change_table_check_constraint(check As Boolean, formula As String)
  ' change a multiple check constraint
  table_constraints["check"] = check
  If check Then
    table_constraints["check formula"] = formula
  Endif
End

Public Sub change_table_unique_constraint(unique As Boolean, tuples As String[])
  ' change the multiple unique constraint
  table_constraints["unique"] = unique
  If unique Then
    table_constraints["unique tuples"] = tuples
  Endif  
End

Public Sub change_options(attribute As Integer, att_options As Collection)
  options[attribute] = att_options
End

Public Sub toSQL() As String
  ' construct a CREATE TABLE statement
  ' RJESITI KOMENTARE
  Dim i As Integer
  Dim statement, unique_tuple As String
  statement = "CREATE TABLE \"" & escape(table_name) & "\" (" 
  For i = 0 To attributes.Count - 1 
    If attributes[i] = "" Then
      Break
    Endif
    statement &= "\"" & escape(attributes[i]) & "\" "
    statement &= Upper(datatypes[i])
    If options[i]["size"] <> "" Then
      ' STAVITI PROVJERE JE LI RIJEC O BROJEVIMA
      statement &= "(" & options[i]["size"] & ")"
    Endif
    If options[i]["precision"] <> "" Then
      If options[i]["scale"] <> "" Then
        statement &= "(" & options[i]["precision"] & ", " & options[i]["scale"] & ")"
      Else
        If options[i]["fields"] <> "" Then
          statement &= " " & options[i]["fields"] & " (" & options[i]["precision"] & ")" 
        Else
          If datatypes[i] = "time with time zone" Then
            statement = Left(statement, Len(statement) - Len(datatypes[i]))
            statement &= Upper("time (" & options[i]["precision"] & ") with time zone")
          Else
            If datatypes[i] = "time without time zone" Then
              statement = Left(statement, Len(statement) - Len(datatypes[i]))
              statement &= Upper("time (" & options[i]["precision"] & ") without time zone")
            Else
              If datatypes[i] = "timestamp with time zone" Then
                statement = Left(statement, Len(statement) - Len(datatypes[i]))
                statement &= Upper("timestamp (" & options[i]["precision"] & ") with time zone")
              Else 
                If datatypes[i] = "timestamp without time zone" Then
                  statement = Left(statement, Len(statement) - Len(datatypes[i]))
                  statement &= Upper("timestamp (" & options[i]["precision"] & ") without time zone")
                Else
                  statement &= "(" & options[i]["precision"] & ")"
                Endif
              Endif
            Endif
          Endif
        Endif
      Endif
    Endif
    If options[i]["1d array"] <> "" Then
      statement &= "[]"
    Endif
    If options[i]["2d array"] <> "" Then
      statement &= "[][]"
    Endif
    statement &= " "
    If constraints[i]["not null"] Then
      statement &= "NOT NULL "
    Endif
    If constraints[i]["unique"] Then
      statement &= "UNIQUE "
    Endif
    If constraints[i]["primary key"] Then
      statement &= "PRIMARY KEY "
    Endif
    If constraints[i]["check"] Then
      statement &= "CHECK(" & escape(constraints[i]["check formula"]) & ") "
    Endif
    If constraints[i]["references"] Then
      statement &= "REFERENCES " & constraints[i]["referenced table"] & " ON DELETE " & constraints[i]["on delete"] & " ON UPDATE " & constraints[i]["on update"] & " "
    Endif
    If constraints[i]["default"] Then
      statement &= "DEFAULT " & constraints[i]["default value"] & ""
    Endif
    statement &= ", "
  Next
  If table_constraints["primary key"] Then
    statement &= "PRIMARY KEY(" & escape(table_constraints["primary keys"].join(",")) & "), "
  Endif
  If table_constraints["check"] Then
    statement &= "CHECK(" & escape(table_constraints["check formula"]) & "), "
  Endif
  If table_constraints["unique"] Then
    For Each unique_tuple In table_constraints["unique tuples"] 
      statement &= "UNIQUE(" & escape(unique_tuple) & "), "
    Next
  Endif
  statement = Left(statement, Len(statement) - 2)
  statement &= ")"
  Return statement
End

Public Sub escape(repl_string As String) As String
  ' escape "-characters in a string
  Return Replace(repl_string, "\"", "\"\"")  
End


