' Gambas class file

' PostgreSQL datatypes
Public datatypes As String[]
' semaphore for stopping an event
Public stop_event As Boolean
' datatypes without additional options
Public basic_datatypes As String[]
' message inbox for reference manager
Public reference As String
Public onDelete As String
Public onUpdate As String
' message inbox for ineritance manager
Public inherits_from As String
' the table object dealing with all attribute definitions and constraints
Public s3table As SQLiteTable
' main table view
Public main_table_view As TableView
' unique constraint attribute holder
Public unique_attributes As New String[][]

Public Sub Form_Open()
  Dim dbobjects As Collection
  dbobjects = FMain.db.get_db_objects()
  stop_event = False
  main_table_view = TableViewMain
  s3table = New SQLiteTable(FMain.db, SQLiteTable.ALTER)
  s3table.table_name = Left(FMain.main_tabstrip.Text, Len(FMain.main_tabstrip.Text) - 8)
  datatypes = ["integer", "real", "text", "blob"]
  basic_datatypes = ["integer", "real", "text", "blob"]
  datatypes.Sort()
  With TableViewMain
    .Rows.Count = 30
    .Columns.Count = 3
    .Header = .Both
    .Columns[0].Title = "Attribute name"
    .Columns[0].Width += 50
    .Columns[1].Title = "Data type"
    .Columns[1].Width += 50
    .Columns[2].Title = "Description"
  End With
  VSplitMain.Layout = [2, 1]
  IconPanelConstraints.Index = 1
  ' load table from db
  load_ui_from_db()
End

Public Sub load_ui_from_db()
  ' load all table definitions from the db and paste it into the UI
  Dim i As Integer
  s3table.load_from_db(Left(FMain.main_tabstrip.Text, - Len(" - Alter Table")))
  
  For i = 0 To s3table.attributes.Max
    With TableViewMain
      .Row = i
      .Column = 0
      .Current.Text = s3table.attributes[i]
      .Column = 1
      .Current.Text = s3table.datatypes[i]
      .Column = 2
      .Current.Text = s3table.descriptions[i]
    End With
  Next
  
  With s3table
    ListBoxPrimaryKey.List = .attributes
    If .table_constraints["primary key"] Then
      CheckBoxTablePrimaryKey.Value = True
      For i = 0 To .table_constraints["primary keys"].Max
        ListBoxPrimaryKey[ListBoxPrimaryKey.Find(.table_constraints["primary keys"][i])].Selected = True
      Next
    Endif
    If .table_constraints["check"] Then
      CheckBoxTableCheck.Value = True
      For i = 0 To .table_constraints["check formulae"].Max
        ListBoxTableCheck.Add(.table_constraints["check formulae"][i])
      Next
    Endif
    ListBoxUnique.List = .attributes
    If .table_constraints["unique"] Then
      CheckBoxTableUnique.Value = True
      For i = 0 To .table_constraints["unique tuples"].Max
        ListBoxAdded.Add(.table_constraints["unique tuples"][i].join(", "))
        unique_attributes.Add(.table_constraints["unique tuples"][i])
      Next
    Endif
  End With
  TableViewMain.Row = 0
  TableViewMain.Column = 0
  load_constraints(0)
End


Public Sub VSplitMain_Resize()
  ' get the table view to arrange its size according to the size of the VSplit
  VBoxDesign.Width = VSplitMain.Children[0].Width
  VBoxDesign.Height = VSplitMain.Children[0].Height
  PanelToolBox.Width = VSplitMain.Children[0].Width
  TableViewMain.Width = VSplitMain.Children[0].Width
  TableViewMain.Height = VSplitMain.Children[0].Height - PanelToolBox.Height
  
End


Public Sub TableViewMain_Click()
  ' if the current cell is a dropdown cell, create a combobox, else edit it
  With TableViewMain
    If all_previous(.row) Then
      s3table.change_attribute(.Row, TableViewMain[.Row, 0].text, TableViewMain[.Row, 1].text, TableViewMain[.Row, 2].text)
      If .Column = 0 Or .Column = 2 Then
        .Edit()
        If TableViewMain[.Row, 1].text = "" Then
          TableViewMain[.Row, 1].text = "text"
        Endif
      Endif
      If .Column = 1 Then
        .Edit(datatypes, True)
      Endif
    Endif
    load_constraints(.Row)
  End With
End



Public Sub TableViewMain_Save(row As Integer, col As Integer, value As String)
  ' save the value of a cell and all collumn constraints
  Dim i As Integer
  Dim save_row, save_col As Integer
  save_row = TableViewMain.Row
  save_col = TableViewMain.Column
  If Not stop_event Then
    If col = 0 Then
      For i = 0 To TableViewMain.Rows.Count - 1
        If TableViewMain[i, 0].text = value And i <> row And value <> "" Then
          stop_event = True
          Message.Error("There is already an attribute with the name '" & value & "' defined! Please choose another name.")
          TableViewMain.Current.Text = ""
          TableViewMain.Row = row
          TableViewMain.Column = col
          TableViewMain.edit
          stop_event = False
          Return
        Endif
      Next
      TableViewMain.Row = save_row
      TableViewMain.Column = save_col
      TableViewMain[row, col].Text = value
      Try ListBoxUnique[row].Text = value
      If Error Then ListBoxUnique.Add(value)
      Try ListBoxPrimaryKey[row].Text = value
      If Error Then ListBoxPrimaryKey.Add(value)
    Else
      TableViewMain[row, col].Text = value
    Endif
    s3table.change_attribute(row, TableViewMain[row, 0].text, TableViewMain[row, 1].text, TableViewMain[row, 2].text)
  Endif
  
End

Public Sub load_constraints(row As Integer)
  ' load all constraints for the given attribute
  stop_event = True
  If s3table.attributes.Count > 0 Then
    With s3table
      If .constraints.Count - 1 < row Then
        CheckBoxNotNull.value = False
        CheckBoxUnique.value = False
        CheckBoxPrimaryKey.value = False
        CheckBoxReferences.Value = False
        LabelReferencedTable.Text = ""
        CheckBoxDefault.Value = False
        TextBoxDefault.Text = ""
      Else
        If IsNull(.constraints[row]["not null"]) Then
          .constraints[row]["not null"] = False
        Endif
        CheckBoxNotNull.value = .constraints[row]["not null"]
        If IsNull(.constraints[row]["unique"]) Then
          .constraints[row]["unique"] = False
        Endif
        CheckBoxUnique.value = .constraints[row]["unique"]
        If IsNull(.constraints[row]["primary key"]) Then
          .constraints[row]["primary key"] = False
        Endif
        CheckBoxPrimaryKey.value = .constraints[row]["primary key"]
        If IsNull(.constraints[row]["check"]) Then
          .constraints[row]["check"] = False
        Endif
        If IsNull(.constraints[row]["references"]) Then
          .constraints[row]["references"] = False
        Endif
        CheckBoxReferences.Value = .constraints[row]["references"]
        If IsNull(.constraints[row]["referenced table"]) Then
          .constraints[row]["referenced table"] = ""
        Endif
        LabelReferencedTable.Text = .constraints[row]["referenced table"]
        If IsNull(.constraints[row]["default"]) Then
          .constraints[row]["default"] = False
        Endif
        CheckBoxDefault.Value = .constraints[row]["default"]
        If IsNull(.constraints[row]["default value"]) Then
          .constraints[row]["default value"] = ""
        Endif
        TextBoxDefault.Text = .constraints[row]["default value"]
      Endif
      
    End With
  Endif
  stop_event = False
End



Public Sub all_previous(row As Integer) As Boolean
  ' check if all previous rows have been filled with data
  Dim i As Integer
  If row = 0 Then Return True
  For i = 0 To row - 1
    If TableViewMain[i, 0].Text = "" Then
      Return False
    Endif
  Next
  Return True
End



Public Sub ToolButtonExecute_Click()
  ' ask the user if he/she is sure and then create the table
  Dim child As Object
  If Message.Question("Do you want to create the table?", "Yes", "No, continue editing") = 1 Then
    If IsNull(FMain.db.execute(s3table.toSQL())) Then
      Return
    Else
      With FMain.main_tabstrip.Current
        For Each child In .Children
          child.Close
        Next
          .Delete
      End With
      FMain.db.refresh_db_tree()
      FMain.main_tabstrip.index = 0
      Message.Info("Table successfully created!")
    Endif
  Endif
End

Public Sub ToolButtonClose_Click()
  ' ask the user if he/she is sure and then close the tab
  Dim child As Variant
  With FMain.main_tabstrip.Current
    For Each child In .Children
      child.Close
    Next
    .Delete
  End With
  FMain.main_tabstrip.index = 0
End

Public Sub CheckBoxTableCheck_Click()
  ' toggle the textbox, toolbutons and listbox
  TextBoxTableCheck.Enabled = CheckBoxTableCheck.Value
  ToolButtonAddCheck.Enabled = CheckBoxTableCheck.Value
  ToolButtonRemoveCheck.Enabled = CheckBoxTableCheck.Value
  ListBoxTableCheck.Enabled = CheckBoxTableCheck.Value
  If CheckBoxTableCheck.Value = False Then
    s3table.change_table_check_constraint(CheckBoxTableCheck.Value, ListBoxTableCheck.List)
    ListBoxTableCheck.List = []
  Endif
End

Public Sub CheckBoxTableUnique_Click()
   ' toggle the listbox
  If CheckBoxTableUnique.Value Then
    ListBoxUnique.Enabled = True
    ListBoxAdded.Enabled = True
    ToolButtonAdd.Enabled = True
    ToolButtonRemove.Enabled = True
  Else
    ListBoxUnique.Enabled = False
    ListBoxAdded.Enabled = False
    ToolButtonAdd.Enabled = False
    ToolButtonRemove.Enabled = False
    If s3table.change_table_unique_constraint(CheckBoxTableUnique.Value, Null) Then
      ListBoxAdded.List = []
      unique_attributes = New String[][]
    Endif
  Endif
End

Public Sub CheckBoxTablePrimaryKey_Click()
   ' toggle the listbox
  If CheckBoxTablePrimaryKey.Value Then
    ListBoxPrimaryKey.Enabled = True
    stop_event = True
    CheckBoxPrimaryKey.Value = False
    stop_event = False
    CheckBoxTablePrimaryKey.Value = True
    ToolButtonPrimaryKeySave.Enabled = True
  Else
    ListBoxPrimaryKey.Enabled = False
    ToolButtonPrimaryKeySave.Enabled = False
    If Not stop_event Then
      s3table.change_table_primary_key_constraint(False, ListBoxPrimaryKey.List)
    Endif
  Endif
End

Public Sub CheckBoxReferences_Click()
   ' toggle the button
  If CheckBoxReferences.Value Then
    ButtonFindReferencedTable.Enabled = True
  Else
    If Not stop_event Then
      If s3table.change_references_constraint(main_table_view.Row, False) Then
        ButtonFindReferencedTable.Enabled = False
        LabelReferencedTable.Text = ""
      Else
        stop_event = True
        CheckBoxReferences.Value = True
        stop_event = False
      Endif
    Endif
  Endif
End

Public Sub ToolButtonAdd_Click()
  ' add the selected attributes to the unique constriants listbox
  Dim i As Integer
  Dim unique As String
  Dim tbl_tuples As New String[]
  unique = ""
  For i = 0 To ListBoxUnique.Count - 1
    If ListBoxUnique[i].Selected Then
      unique &= "\"" & s3table.escape(ListBoxUnique[i].Text) & "\", "
      tbl_tuples.Push(ListBoxUnique[i].Text)
    End If
  Next
  If tbl_tuples.Count = 1 Then
    Message.Warning("Please select at least two attributes for the unique constraint!")
    Return
  Endif
  unique = Left$(unique, -2)
  If unique <> "" Then
    For i = 0 To ListBoxAdded.Count - 1
      If ListBoxAdded[i].Text = unique Then
        Return
      Endif
    Next
    ListBoxAdded.Add(unique)
    unique_attributes.Push(tbl_tuples)
    ListBoxUnique.UnselectAll
  Endif
  ' add the unique constraints to the current table
  stop_event = True
  With s3table
    .change_table_unique_constraint(CheckBoxTableUnique.Value, unique_attributes)
    ListBoxUnique.List = .attributes
    If .table_constraints["unique"] Then
      CheckBoxTableUnique.Value = True
      ListBoxAdded.List = []
      For i = 0 To .table_constraints["unique tuples"].Max
        ListBoxAdded.Add(.table_constraints["unique tuples"][i].join(", "))
      Next
    Endif
    stop_event = False
  End With
End

Public Sub ToolButtonRemove_Click()
  ' remove the selected unique constraint
  Dim i As Integer
  If ListBoxAdded.Index <> -1 Then
    unique_attributes.Remove(ListBoxAdded.Index)
    ListBoxAdded.Remove(ListBoxAdded.Index)
    stop_event = True
    With s3table
      .change_table_unique_constraint(CheckBoxTableUnique.Value, unique_attributes)
      ListBoxUnique.List = .attributes
      If .table_constraints["unique"] Then
        CheckBoxTableUnique.Value = True
        ListBoxAdded.List = []
        For i = 0 To .table_constraints["unique tuples"].Max
          ListBoxAdded.Add(.table_constraints["unique tuples"][i].join(", "))
        Next
        unique_attributes = .table_constraints["unique tuples"]
      Endif
      stop_event = False
    End With
  Endif
End

Public Sub CheckBoxPrimaryKey_Click()
  ' add a primary key constraint to the current attribute
  If Not stop_event Then
    If Not s3table.change_primary_key_constraint(TableViewMain.Row, CheckBoxPrimaryKey.Value) Then
      If Not stop_event Then
        stop_event = True
        CheckBoxPrimaryKey.Value = Not CheckBoxPrimaryKey.Value
        stop_event = False
      Endif
    Else
      ' if the table has a simple primary key, it cannot have a composite one
      ' thus disable the composite key control
      stop_event = True
      CheckBoxTablePrimaryKey.Value = False
      ListBoxPrimaryKey.Enabled = False
      ToolButtonPrimaryKeySave.Enabled = False
      stop_event = False
    Endif
  Endif
  Catch
    Return
End

Public Sub ButtonFindReferencedTable_Click()
  ' open the reference finder
  Dim ref As New FormPostgreSQLGetReference
  ref.caller = Me
  ref.ShowModal
  ' add a references constraint to the current attribute
  If s3table.change_references_constraint(TableViewMain.Row, CheckBoxReferences.Value, reference, onDelete, onUpdate) Then
    LabelReferencedTable.Text = reference
  Endif
End

Public Sub TableViewMain_Menu()
  ' show the popup menu
  If all_previous(TableViewMain.Row) Then
    'MenuTableDesign.Popup()
  Endif
End

Public Sub MenuDeleteRow_Click()
  ' delete the current row
  Dim i As Integer
  If all_previous(TableViewMain.Row) Then
    With TableViewMain
      For i = .Row To .Rows.Count - 2
        TableViewMain[i, 0].Text = TableViewMain[i + 1, 0].Text
        TableViewMain[i, 1].Text = TableViewMain[i + 1, 1].Text
        TableViewMain[i, 2].Text = TableViewMain[i + 1, 2].Text
      Next
    End With
    With s3table
      .attributes.Delete(TableViewMain.Row)
      .constraints.Delete(TableViewMain.Row)
      .datatypes.Delete(TableViewMain.Row)
      .descriptions.Delete(TableViewMain.Row)
    End With
    TableViewMain.Column = 0
    TableViewMain.Column = 1
    TableViewMain.Column = 2
  Endif
  Catch
    Return
End

Public Sub MenuPrimaryKey_Click()
  ' make the current row the primary key
  CheckBoxPrimaryKey.Value = True
  CheckBoxTablePrimaryKey.Value = False
  
End

Public Sub CheckBoxNotNull_Click()
  ' add a not null constraint to the current attribute
  If Not s3table.change_not_null_constraint(TableViewMain.Row, CheckBoxNotNull.Value) And Not stop_event Then
    stop_event = True
    CheckBoxNotNull.Value = Not CheckBoxNotNull.Value
    stop_event = False
  Endif
End

Public Sub CheckBoxUnique_Click()
  ' add a unique constraint to the current attribute
  Dim can_change As Boolean
  If Not stop_event Then
    can_change = s3table.change_unique_constraint(TableViewMain.Row, CheckBoxUnique.Value)
    If Not can_change And Not stop_event Then
      stop_event = True
      CheckBoxUnique.Value = Not CheckBoxUnique.Value
      stop_event = False
    Endif
  Endif
End

Public Sub ListBoxPrimaryKey_Select()
  ' toggle the primary key save button
  ToolButtonPrimaryKeySave.Enabled = True
End

Public Sub TableViewMain_LostFocus()
  ' a little hack to get the current constraint created if there hasn't been anything entered
  Try TableViewMain_Save(TableViewMain.Row, TableViewMain.Column, TableViewMain.Current.Text)
End

Public Sub TextBoxDefault_KeyRelease()
  ' add a default constraint to the current attribute
  ToolButtonDefaultSave.Enabled = True
End

Public Sub CheckBoxDefault_Click()
  ' toggle the textbox
  If CheckBoxDefault.value Then
    TextBoxDefault.Enabled = True
    ToolButtonDefaultSave.Enabled = True
  Else
    If Not stop_event Then
      TextBoxDefault.Text = ""
      s3table.change_default_constraint(TableViewMain.Row, CheckBoxDefault.Value, TextBoxDefault.Text)
      TextBoxDefault.Enabled = False
      ToolButtonDefaultSave.Enabled = False
    Endif
  Endif
End

Public Sub ToolButtonAddCheck_Click()
  ' add the check expression from the textbox to the listbox
  Dim can_change As Boolean
  Dim checks As String[]
  checks = ListBoxTableCheck.List
  checks.Add(TextBoxTableCheck.Text)
  can_change = s3table.change_table_check_constraint(CheckBoxTableCheck.Value, checks)
  If can_change Then
    ListBoxTableCheck.Add(TextBoxTableCheck.Text)
    TextBoxTableCheck.text = ""
  Endif
End

Public Sub ToolButtonRemoveCheck_Click()
  ' remove the selected check expression from the listbox 
  ListBoxTableCheck.Remove(ListBoxTableCheck.Index)
  s3table.change_table_check_constraint(CheckBoxTableCheck.Value, ListBoxTableCheck.List)
End


Public Sub ToolButtonPrimaryKeySave_Click()
  ' save the selected primary keys
  Dim can_change As Boolean
  Dim i As Integer
  Dim keys As New String[]
  For i = 0 To ListBoxPrimaryKey.Count - 1
    If ListBoxPrimaryKey[i].Selected Then
      keys.Add(ListBoxPrimaryKey[i].Text)
    Endif
  Next
  can_change = s3table.change_table_primary_key_constraint(CheckBoxTablePrimaryKey.value, keys)
  If can_change Then
    ToolButtonPrimaryKeySave.Enabled = False
  Endif
End

Public Sub ToolButtonDefaultSave_Click()
  ' save the new default value
  If Not stop_event Then
    s3table.change_default_constraint(TableViewMain.Row, CheckBoxDefault.Value, TextBoxDefault.Text)
    ToolButtonDefaultSave.Enabled = False
  Endif
End
