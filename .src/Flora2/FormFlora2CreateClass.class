' Gambas class file

' Flora2 datatypes
Public datatypes As String[]
' method types
Public methodtypes As String[]
' semaphore for stopping an event
Public stop_event As Boolean
' message inbox for ineritance manager
Public flclass As Flora2Class
' main table view
Public main_table_view As TableView

Public Sub Form_Open()
  Dim user_type As String
  Dim dbobjects As Collection
  dbobjects = FMain.db.get_db_objects()
  stop_event = False
  main_table_view = TableViewMain
  flclass = New Flora2Class
  flclass.name = Left(FMain.main_tabstrip.Text, Len(FMain.main_tabstrip.Text) - Len(" - Class"))
  datatypes = ["\\long", "\\integer", "\\double", "\\decimal", "\\string", "\\symbol", "\\object", "\\iri", "\\time", "\\date", "\\dateTime", "\\duration", "\\list", "\\charlist"]
  methodtypes = ["-> (behavioral inheritance)", "=> (structural inheritance)", "(behavioral boolean)", "=>(structural boolean)"]
  For Each user_type In FMain.db.get_db_objects()["classes"]
    datatypes.Push(user_type)
  Next
  datatypes.Sort()
  ComboBoxReturnValue.List = datatypes
  ComboBoxArguments.List = datatypes
  ComboBoxMethodType.List = methodtypes
  With TableViewMain
    .Rows.Count = 30
    .Columns.Count = 5
    .Header = .Both
    .Columns[0].Title = "Attribute name"
    .Columns[0].Width += 50
    .Columns[1].Title = "Lower bound"
    .Columns[1].Width += 10
    .Columns[2].Title = "Upper bound"
    .Columns[2].Width += 10
    .Columns[3].Title = "Method type"
    .Columns[3].Width += 50
    .Columns[4].Title = "Data type"
  End With
  VSplitMain.Layout = [2, 1]
End

Public Sub VSplitMain_Resize()
  ' get the table view to arrange its size according to the size of the VSplit
  VBoxDesign.Width = VSplitMain.Children[0].Width
  VBoxDesign.Height = VSplitMain.Children[0].Height
  PanelToolBox.Width = VSplitMain.Children[0].Width
  TableViewMain.Width = VSplitMain.Children[0].Width
  TableViewMain.Height = VSplitMain.Children[0].Height - PanelToolBox.Height
End


Public Sub TableViewMain_Click()
  ' if the current cell is a dropdown cell, create a combobox, else edit it
  With TableViewMain
    If all_previous(.row) Then
      flclass.change_attribute(.Row, TableViewMain[.Row, 0].text, TableViewMain[.Row, 1].text, TableViewMain[.Row, 2].text, TableViewMain[.Row, 3].text, TableViewMain[.Row, 4].text)
      If .Column = 0 Or .Column = 1 Or .Column = 2 Then
        .Edit()
        If TableViewMain[.Row, 1].text = "" Then
          TableViewMain[.Row, 1].text = "0"
        Endif
        If TableViewMain[.Row, 2].text = "" Then
          TableViewMain[.Row, 2].text = "*"
        Endif
        If TableViewMain[.Row, 3].text = "" Then
          TableViewMain[.Row, 3].text = "=> (structural inheritance)"
        Endif
        If TableViewMain[.Row, 4].text = "" Then
          TableViewMain[.Row, 4].text = "\\string"
        Endif
      Endif
      If .Column = 3 Then
        .Edit(methodtypes, True)
      Endif
      If .Column = 4 Then
        .Edit(datatypes, True)
      Endif
    Endif
  End With
End


Public Sub TableViewMain_Save(row As Integer, col As Integer, value As String)
  ' save the value of a cell and all collumn constraints
  Dim i As Integer
  Dim save_row, save_col As Integer
  save_row = TableViewMain.Row
  save_col = TableViewMain.Column
  If Not stop_event Then
    If col = 0 Then
      For i = 0 To TableViewMain.Rows.Count - 1
        If TableViewMain[i, 0].text = value And i <> row And value <> "" Then
          stop_event = True
          Message.Error("There is already an attribute with the name '" & value & "' defined! Please choose another name.")
          TableViewMain.Current.Text = ""
          TableViewMain.Row = row
          TableViewMain.Column = col
          TableViewMain.edit
          stop_event = False
          Return
        Endif
      Next
      TableViewMain.Row = save_row
      TableViewMain.Column = save_col
      TableViewMain[row, col].Text = value
    Else
      TableViewMain[row, col].Text = value
    Endif
    flclass.change_attribute(row, TableViewMain[row, 0].text, TableViewMain[row, 1].text, TableViewMain[row, 2].text, TableViewMain[row, 3].text, TableViewMain[row, 4].text)
  Endif
End

Public Sub all_previous(row As Integer) As Boolean
  ' check if all previous rows have been filled with data
  Dim i As Integer
  If row = 0 Then Return True
  For i = 0 To row - 1
    If TableViewMain[i, 0].Text = "" Then
      Return False
    Endif
  Next
  Return True
End

Public Sub ToolButtonExecute_Click()
  ' ask the user if he/she is sure and then create the table
  Dim child As Object
  If Message.Question("Do you want to create the class?", "Yes", "No, continue editing") = 1 Then
    Try FMain.db.query("insert{" & flclass.toFMolecule() & "}")
    If Error 
      Print flclass.toFMolecule()
      Message.Error(Error.Text)
      Return
    Else
      With FMain.main_tabstrip.Current
        For Each child In .Children
          child.Close
        Next
          .Delete
      End With
      FMain.db.refresh_db_tree()
      FMain.main_tabstrip.index = 0
      Message.Info("Class successfully created!")
    Endif
  Endif
End

Public Sub ToolButtonCancel_Click()
  ' ask the user if he/she is sure and then close the tab
  Dim child As Variant
  If Message.Question("Do you want to discard your class design? If yes all entered data will be lost.", "Yes", "No, continue editing") = 1 Then
    With FMain.main_tabstrip.Current
      For Each child In .Children
        child.Close
      Next
      .Delete
    End With
    FMain.main_tabstrip.index = 0
  Endif
End

Public Sub TableViewMain_Menu()
  ' show the popup menu
  If all_previous(TableViewMain.Row) Then
    MenuClassViewMain.Popup()
  Endif
End

Public Sub MenuDeleteAttribute_Click()
  ' delete the current row
  Dim i As Integer
  If all_previous(TableViewMain.Row) Then
    With TableViewMain
      For i = .Row To .Rows.Count - 2
        TableViewMain[i, 0].Text = TableViewMain[i + 1, 0].Text
        TableViewMain[i, 1].Text = TableViewMain[i + 1, 1].Text
        TableViewMain[i, 2].Text = TableViewMain[i + 1, 2].Text
      Next
    End With
    With flclass
      .attributes.Delete(TableViewMain.Row)
      .methodtypes.Delete(TableViewMain.Row)
      .datatypes.Delete(TableViewMain.Row)
      .upper_bounds.Delete(TableViewMain.Row)
      .lower_bounds.Delete(TableViewMain.Row)
    End With
    TableViewMain.Column = 0
    TableViewMain.Column = 1
    TableViewMain.Column = 2
  Endif
  Catch
    Return
End

Public Sub TableViewMain_LostFocus()
  ' a little hack to get the current constraint created if there hasn't been anything entered
  Try TableViewMain_Save(TableViewMain.Row, TableViewMain.Column, TableViewMain.Current.Text)
End

Public Sub ToolButtonAdd_Click()
  ' add the method to the listbox
  If TextBoxMethodName.Text And ListBoxMethods.Find(TextBoxMethodName.Text) = -1 Then
    ListBoxArguments.Clear
    stop_event = True
    ComboBoxMethodType.Index = 0
    ComboBoxReturnValue.Index = 0
    stop_event = False
    ListBoxMethods.Add(TextBoxMethodName.Text)
    flclass.change_method(ListBoxMethods.Count - 1, TextBoxMethodName.Text, ListBoxArguments.List, ComboBoxMethodType.Text, ComboBoxReturnValue.Text)
    ListBoxMethods.Index = ListBoxMethods.Count - 1
    ListBoxMethods.Current.Selected = True
  Endif
End

Public Sub ToolButtonRemove_Click()
  ' delete the method
  With flclass
    .methods.Delete(ListBoxMethods.Index)
    .method_types_m.Delete(ListBoxMethods.Index)
    .arguments.Delete(ListBoxMethods.Index)
  End With
  ListBoxMethods.Remove(ListBoxMethods.Index)
  ListBoxArguments.Clear
End

Public Sub ComboBoxReturnValue_Click()
  ' change the return value of the selected method
  If Not stop_event Then
    flclass.change_method(ListBoxMethods.index, ListBoxMethods.Text, ListBoxArguments.List, ComboBoxMethodType.Text, ComboBoxReturnValue.Text)
  Endif
End

Public Sub ListBoxMethods_Click()
  ' update the comboboxes and listbox for the selected method
  With flclass
    stop_event = True
    ComboBoxMethodType.Text = .method_types_m[ListBoxMethods.Index]
    ComboBoxReturnValue.Text = .return_values[ListBoxMethods.Index]
    ListBoxArguments.List = .arguments[ListBoxMethods.Index]
    stop_event = False
  End With
  ComboBoxArguments.Enabled = True
  ComboBoxMethodType.Enabled = True
  ComboBoxReturnValue.Enabled = True
  ListBoxArguments.Enabled = True
  ToolButtonAddArgument.Enabled = True
  ToolButtonRemoveArgument.Enabled = True
End

Public Sub ComboBoxMethodType_Click()
  ' change the method type of the selected method
  If Not stop_event Then
    flclass.change_method(ListBoxMethods.index, ListBoxMethods.Text, ListBoxArguments.List, ComboBoxMethodType.Text, ComboBoxReturnValue.Text)
  Endif
End

Public Sub ToolButtonAddArgument_Click()
  ' add the selected argument type to the listbox
  ListBoxArguments.Add(ComboBoxArguments.Text)
  flclass.change_method(ListBoxMethods.index, ListBoxMethods.Text, ListBoxArguments.List, ComboBoxMethodType.Text, ComboBoxReturnValue.Text)
End

Public Sub ToolButtonRemoveArgument_Click()
  ' remove the selected argument from the listbox
  ListBoxArguments.Remove(ListBoxArguments.Index)
  flclass.change_method(ListBoxMethods.index, ListBoxMethods.Text, ListBoxArguments.List, ComboBoxMethodType.Text, ComboBoxReturnValue.Text)
End
