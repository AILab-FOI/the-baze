' Gambas class file

' holds the filename to be opened
Public openfile As String
' are there recently opened files
Public hasrecent As Boolean
' store the database type
Public dbtype As String
' path to XSB inbox
Public xsb_exe As String
' path to ZODB file storage inbox
Public zodb_fs As String
' semaphore for events
Public stop_event As Boolean
' last shown index
Public last_index As Integer

Public Sub Form_Open()
  Dim setting As String
  Dim helper As String[]
  Dim xsb, flora2, save_shell As String
  Dim i As Integer
  stop_event = False
  last_index = 0
  ' set return value to canceled in case the user clicks the x button
  FMain.wizard_return = "canceled"
  ' default new DB is SQLite
  ComboBoxNewDatabase.Index = 0
  ' check if there are recent files in stored settings and get the last six
  hasrecent = True
  dbtype = ""
  save_shell = System.Shell
  System.Shell = "/bin/bash"
  Shell "which xsb" To xsb 'TODO: Make XSB and Flora2 and integral part of the-baze
  If xsb Then
    TextBoxXXSB.Text = Left$(xsb, -1)
  Endif
  Shell "which flora2" To flora2 
  If flora2 Then
    TextBoxfflora2.Text = Left$(flora2, -1)
  Endif
  Shell "which runflora" To flora2 
  If flora2 Then
    TextBoxfflora2.Text = Left$(flora2, -1)
  Endif
  System.Shell = save_shell
  For i = 1 To FMain.MAX_RECENT_LIST_SIZE
    setting = Settings["FormOpenWizard/option-" & i]
    If setting = Null Then
      Break
    Endif
    ListViewRecent.Add(setting, Split(setting, "/").Pop())
  Next
  If i = 1 Then
    hasrecent = False
  Endif
  load_odbc_dsn()
End

Private Sub load_odbc_dsn()
  ' Query odbcinst and put the DSNs into the appropriate comboboxes
  ' odbcinst -q -s -h --> query user defined DSNs
  ' odbcinst -q -s -l --> query system defined DSNs
  Dim DSNs As String[]
  Dim dsn As String
  Try DSNs = RelationalDB.get_all_dsns()
  If Error Then
    Message.Error("Cannot find odbcinst on your path! Please install unixODBC.")
    Return
  Endif
  For Each dsn In DSNs
    ComboBoxXDSN.Add(dsn, ComboBoxXDSN.Count)
    ComboBoxfDSN.Add(dsn, ComboBoxXDSN.Count)
    ComboBoxODSN.Add(dsn, ComboBoxXDSN.Count)
  Next
End

Private Sub display_specific_container(dbname As String)
  Dim index As Integer
'  Dim i As Integer
'  For i = 0 To WizardIntro.Count - 1
'    WizardIntro[i].Hide
'  Next
  stop_event = True
  Select dbname
    Case "PostgreSQL"
      index = 1
    Case "XSB"
      index = 2
    Case "Flora2"
      index = 3
    Case "ZODB"
      index = 4
    Case "eXist"
      index = 5
    Case "CouchDB"
      index = 6
    Case "SQLite"
      index = 7
    Case "ODBC"
      index = 8
    Case "MongoDB"
      index = 9
    Default
      index = 0
  End Select
'  WizardIntro[index].show
  WizardIntro.Index = index
  last_index = index
  stop_event = False
End


Public Sub WizardIntro_Change()
  ' check which option was selected (new, open, connection)
  ' if new or open show the main frame
  ' else show the appropriate connection settings wizard
  Dim selected As String
  Dim please_wait As FormPleaseWait
  Dim i As Integer
  Dim res As Boolean
  If stop_event = True
    Return
  Endif
  If RadioButtonNew.Value Then ' create a new baze
    FMain.new_db_type = ComboBoxNewDatabase.Text
    FMain.wizard_return = "new" 'TODO: add another return value with the new db type (SQLite or ZODB)
    Me.Close
  Else
    If RadioButtonOpen.Value Then ' open an existing baze
      If openfile = "" Then
        display_specific_container("")
        Message.Error("Please choose a file to open!", "OK")
      Else
        FMain.wizard_return = openfile
        Me.Close
      Endif
    Else ' connect to a database
      If RadioButtonConnect.Value Then
        If dbtype <> "" And last_index < WizardIntro.Index Then ' a database type has already been selected, connect to it
          Select Case dbtype
            Case "PostgreSQL"
              FMain.db = New PostgreSQLDB(TextBoxPGHost.Text, TextBoxPGPort.Text, TextBoxPGDBName.Text, TextBoxPGUsername.Text, TextBoxPGPassword.Text, CheckBoxPGStoreP.Value)
            Case "XSB"
              FMain.db = New XSBDB(ComboBoxXDSN.Text, TextBoxXUsername.Text, TextBoxXPassword.Text, CheckBoxXStoreP.Value, TextBoxXXSB.Text)
            Case "Flora2"
              FMain.db = New Flora2DB(ComboBoxfDSN.Text, TextBoxfUsername.Text, TextBoxfPassword.Text, CheckBoxfStoreP.Value, TextBoxfflora2.Text)
            Case "ZODB"
              Select Case ComboBoxZStorageType.Text
                Case "Embedded"
                  FMain.db = New ZODBEmbedded("baze.fs")
                Case "Client storage"
                  FMain.db = New ZODBClientStorage(TextBoxZHost.Text, TextBoxZPort.Text, TextBoxZUsername.Text, TextBoxZPassword.Text, CheckBoxZStoreP.Value)
                Case "File storage"
                  FMain.db = New ZODBFileStorage(TextBoxZDBFile.Text)
              End Select
            Case "eXist"
              FMain.db = New EXistDB(TextBoxEHost.Text, TextBoxEPort.Text, TextBoxEUsername.Text, TextBoxEPassword.Text, CheckBoxEStoreP.Value)
            Case "CouchDB"
              FMain.db = New CouchDB(TextBoxCHost.Text, TextBoxCPort.Text, TextBoxCUsername.Text, TextBoxCPassword.Text, CheckBoxCStoreP.Value)
            Case "SQLite"
              FMain.db = New SQLiteDB(TextBoxSDBFile.Text)
            Case "ODBC"
              FMain.db = New ODBCDB(ComboBoxODSN.Text, TextBoxOUsername.Text, TextBoxOPassword.Text, CheckBoxOStoreP.Value)
              FMain.db.close()
            Case "MongoDB"
              FMain.db = New MongoDB(TextBoxMgHost.Text, TextBoxMgPort.Text, TextBoxMgDBName.Text, TextBoxMgAuthDBName.Text, TextBoxMgUsername.Text, TextBoxMgPassword.Text, CheckBoxMgStoreP.Value)
          End Select
          If dbtype = "XSB" Then
            display_specific_container(dbtype)
            please_wait = New FormPleaseWait
            please_wait.db = FMain.db
            please_wait.silent = True
            Try please_wait.ShowModal
            If Error Then
              Message.Error(Error.Text)
            Else
              Me.Close
            Endif
          Else
            Try FMain.db.connect()
            If Error Then
              FMain.wizard_return = "canceled"
              If dbtype Then
                display_specific_container(dbtype)
              Endif
              If Error.Text Then
                Message.Error(Error.Text)
              Else
                Message.Error("Error connecting to database! Please check your settings.")
              Endif
            Else
              FMain.wizard_return = "connection"
              Me.Close
            Endif
          Endif
        Else
          dbtype = ""
          selected = ""
        Endif
        If last_index > WizardIntro.Index Then
          display_specific_container("")
        Else
          selected = ComboBoxDBTypes.Current.Text
          dbtype = selected
          display_specific_container(selected)
        Endif
      Endif
    Endif
  Endif
End

Public Sub WizardIntro_Cancel()
  ' catch the cancel event and set the return variable to canceled
  ' to prevent showing the main frame
  FMain.wizard_return = "canceled"
  Me.Close
End

Public Sub ToolButtonOpen_Click()
  ' open the file chooser 
  Dim op As New FormOpenFile
  op.caller = Me
  op.ShowModal
  LabelChosenFile.Text = openfile
End

Public Sub RadioButtonNew_Click()
  ' if new radio is clicked disable the other two
  toggle_open(False)
  toggle_connect(False)
  toggle_new(True)
End

Public Sub toggle_new(value As Boolean)
  ' toggle the new database combobox
  ComboBoxNewDatabase.Enabled = value  
End

Private Sub toggle_open(value As Boolean)
  ' if open radio is clicked disable the other two
  ' take care that recent files remain disabled
  ' if there are no recent files in settings
  LabelRecent.Enabled = value
  LabelOther.Enabled = value
  LabelChosenFile.Enabled = value
  If Not value Then
    ListViewRecent.Enabled = value
  Else
    ListViewRecent.Enabled = hasrecent
  Endif
  ToolButtonOpen.Enabled = value
End

Private Sub toggle_connect(value As Boolean)
  ' toggle all controls in the connect radio
  LabelDBType.Enabled = value
  ComboBoxDBTypes.Enabled = value
  ComboBoxDBTypes.Index = 1
End



Public Sub RadioButtonOpen_Click()
  ' toggle all controls in the open radio
  toggle_connect(False)
  toggle_open(True)
  toggle_new(False)
End

Public Sub RadioButtonConnect_Click()
  ' if connect radio is clicked disable the other two
  toggle_open(False)
  toggle_connect(True)
  toggle_new(False)
End

Public Sub ListViewRecent_Click()
  ' if recent file is selected update the file to be opened variable
  openfile = ListViewRecent.Current.Key
End

Public Sub ComboBoxZStorageType_Click()

  If ComboBoxZStorageType.Text = "Client storage" Then
    LabelZHost.Enabled = True
    LabelZPort.Enabled = True
    TextBoxZHost.Enabled = True
    TextBoxZPort.Enabled = True
    LabelZDBFile.Enabled = False
    TextBoxZDBFile.Enabled = False
    TextBoxZUsername.Enabled = True
    TextBoxZPassword.Enabled = True
    LabelZUsername.Enabled = True
    LabelZPassword.Enabled = True
    CheckBoxZStoreP.Enabled = True
    ToolButtonFindZDBFile.Enabled = False
  Else
    If ComboBoxZStorageType.Text = "File storage" Then
      LabelZHost.Enabled = False
      LabelZPort.Enabled = False
      TextBoxZHost.Enabled = False
      TextBoxZPort.Enabled = False
      LabelZDBFile.Enabled = True
      TextBoxZDBFile.Enabled = True
      TextBoxZUsername.Enabled = False
      TextBoxZPassword.Enabled = False
      LabelZUsername.Enabled = False
      LabelZPassword.Enabled = False
      CheckBoxZStoreP.Enabled = False
      ToolButtonFindZDBFile.Enabled = True
    Else
      LabelZHost.Enabled = False
      LabelZPort.Enabled = False
      TextBoxZHost.Enabled = False
      TextBoxZPort.Enabled = False
      LabelZDBFile.Enabled = False
      TextBoxZDBFile.Enabled = False
      TextBoxZUsername.Enabled = False
      TextBoxZPassword.Enabled = False
      LabelZUsername.Enabled = False
      LabelZPassword.Enabled = False
      CheckBoxZStoreP.Enabled = False
      ToolButtonFindZDBFile.Enabled = False
    Endif
  Endif
End

Public Sub ButtonPGTest_Click()
  ' test the PostreSQL connection
  Dim db As New PostgreSQLDB(TextBoxPGHost.Text, TextBoxPGPort.Text, TextBoxPGDBName.Text, TextBoxPGUsername.Text, TextBoxPGPassword.Text, CheckBoxPGStoreP.Value)
  
  Try db.connect()
  If Error Then
    Message.Error(Error.Text)
  Else
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End

Public Sub ButtonXTest_Click()
  ' test the XSB connection
  Dim db As XSBDB
  Dim please_wait As New FormPleaseWait
  Try db = New XSBDB(ComboBoxXDSN.Text, TextBoxXUsername.Text, TextBoxXPassword.Text, CheckBoxXStoreP.Value, TextBoxXXSB.Text)
  If Error Then
    Message.Error(Error.Text)
  Else
    please_wait.db = db
    Try please_wait.ShowModal
    If Error Then
      Message.Error(Error.Text)
    Endif
  Endif
End

Public Sub ToolButtonFindXSB_Click()
  ' show form to find XSB executable
  Dim find_xsb As New FormFindXSB
  find_xsb.caller = Me
  find_xsb.ShowModal()
  TextBoxXXSB.Text = xsb_exe
End

Public Sub ToolButtonFindZDBFile_Click()
  ' show form to find ZODB file storage
  Dim find_fs As New FormFindZODBFileStorage
  find_fs.caller = Me
  find_fs.ShowModal()
  TextBoxZDBFile.Text = zodb_fs
End

Public Sub ButtonETest_Click()
  Dim db As New EXistDB(TextBoxEHost.Text, TextBoxEPort.Text, TextBoxEUsername.Text, TextBoxEPassword.Text, CheckBoxEStoreP.Value)
  Try db.connect()
  If Error Then
    Message.Error("Error connecting to eXist server!\nError details: " & Error.Text)
  Else
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End

Public Sub ToolButtonFindFlora2_Click()
  ' find the Flora2 executable (runflora or flora2)
  Dialog.Title = "Please find the Flora2 executable (runflora or flora2)"
  Dialog.Filter = ["runflora", "Flora executable", "flora2", "Flora executable"]
  If Dialog.OpenFile() Then
    Return
  Endif
  TextBoxfflora2.Text = Dialog.Path
End

Public Sub ButtonfTest_Click()
  ' try to connect to Flora2
  Dim db As New Flora2DB(ComboBoxfDSN.Text, TextBoxfUsername.Text, TextBoxfPassword.Text, CheckBoxfStoreP.Value, TextBoxfflora2.Text)
  Try db.connect()
  If Error Then
    Message.Error("Error connecting to Flora2 database!")
  Else
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End

Public Sub ButtonCTest_Click()
  ' try to connect to couch db
  Dim db As New CouchDB(TextBoxCHost.Text, TextBoxCPort.Text, TextBoxCUsername.Text, TextBoxCPassword.Text, CheckBoxCStoreP.Value)
  Try db.connect()
  If Error Then
    Message.Error("Error connecting to CouchDB!")
  Else
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End

Public Sub ToolButtonFindSDBFile_Click()
  ' find an existing SQLite DB file
  Dialog.Title = "Please find the SQLite database file"
  Dialog.Filter = ["*.sqlite;*.sqlite3", "SQLite database file", "*", "All files"]
  If Dialog.OpenFile() Then
    Return
  Endif
  TextBoxSDBFile.Text = Dialog.Path
End



Public Sub ToolButtonSCreateNew_Click()
  ' Create a new SQLite DB file
  Dim db As SQLiteDB
  Dim db_file, db_host As String
  Dialog.Title = "New SQLite database file"
  Dialog.Filter = ["*.sqlite;*.sqlite3", "SQLite database file", "*", "All files"]
  If Dialog.SaveFile() Then
    Return
  Endif
  TextBoxSDBFile.Text = Dialog.Path
  db = New SQLiteDB(Dialog.Path)
  db_file = Split(db.dbfile, "/").Pop()
  db_host = Mid(db.dbfile, 1, Len(Dialog.Path) - Len(db_file))
  With db.con
    .Type = "sqlite"
    .Host = db_host
    .Name = ""
    .Open()
    .Databases.Add(db_file)
    .Close()
  End With
End

Public Sub ButtonSTest_Click()
 ' try to connect to SQLite db
  Dim db As New SQLiteDB(TextBoxSDBFile.Text)
  
  Try db.connect()
  If Error Then
    Message.Error(Error.Text)
  Else
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End


Public Sub ButtonOTest_Click()
  ' Try to connect to SQLite db ' dsn_ As String, username As String, password As String, store_password As Boolean
  Dim db As New ODBCDB(ComboBoxODSN.Text, TextBoxOUsername.Text, TextBoxOPassword.Text, CheckBoxOStoreP.Value)
  If db.is_open Then
    Try db.close()
    Message.Info("Connection successful!")
  Endif
End

Public Sub ButtonMgTest_Click()
  ' try to connect to MongoDB
  Dim db As New MongoDB(TextBoxMgHost.Text, TextBoxMgPort.Text, TextBoxMgDBName.Text, TextBoxMgAuthDBName.Text, TextBoxMgUsername.Text, TextBoxMgPassword.Text, CheckBoxMgStoreP.Value)
  Try db.connect()
  If Error
    Message.Error(Error.Text)
  Else
    db.close()
    Message.Info("Connection successful!")
  Endif
End
