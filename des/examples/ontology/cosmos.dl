% File: cosmos.dl
% Date: 04/20/2012
% Revised: 08/22/2014
% Author: Fernando Sáenz-Pérez
% Description:
%   Ontology for describing cosmological objects
%   Constraints in the ontology help ontology developers to maintain a consistent instance.
%   The ontology meta-model is based on:
%      F.J. Álvarez, A. Vaquero, and F. Sáenz-Pérez,
%      "Conceptual Modeling of Ontology-based Linguistic Resources with a Focus on Semantic Relations",
%      In Proceedings of the Sixth International Conference on Language Resources and Evaluation (LREC 2008), May, 2008.
%   This example is inspired on:
%      “A Theoretical Framework for the Declarative Debugging of Datalog Programs”,
%      In International Workshop on Semantics in Data and Knowledge Bases (SDKB 2008), Springer, LNCS 4925, 2008
%   This Datalog program can be tested on DES (des.sourceforge.net)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Relational Constraints: Type, PK, FK, domain
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Concepts
%   - Type constraints:
:- type(concepts(type:string, id:string, arity:integer)).
%   - Primary key constraint:
:- pk(concepts,[id]).
%   - Domain constraints:
%     * Concepts can be either a concept or a relation:
:- concepts(Type,Id,Arity),
   Type \= concept, 
   Type \= relation.
%     * A concept has arity 0:
:- concepts(concept,Id,Arity),
   Arity \= 0.
%     * A relation has arity 2:
:- concepts(relation,Id,Arity),
   Arity \= 2.

% Binary relations
%   - Type constraints:
:- type(binary_relation(relation:string, fromConcept:string, toConcept:string)).
%   - Primary key constraint:
:- pk(binary_relation,[relation, fromConcept, toConcept]). 
%   - Foreign key constraint:
:- fk(binary_relation,[relation],concepts,[id]).
:- fk(binary_relation,[fromConcept],concepts,[id]).
:- fk(binary_relation,[toConcept],concepts,[id]).

% Algebraic properties
%   - Type constraints:
:- type(algebraic_properties(algebraicProperty:string)).
%   - Primary key constraint:
:- pk(algebraic_properties,[algebraicProperty]).

% Has algebraic property
%   - Type constraints:
:- type(has_algebraic_property(relation:string, algebraicProperty:string)).
%   - Primary key constraint:
:- pk(has_algebraic_property,[relation, algebraicProperty]). 
%   - Foreign key constraint:
:- fk(has_algebraic_property,[relation],concepts,[id]).
:- fk(has_algebraic_property,[algebraicProperty],algebraic_properties,[algebraicProperty]).

% Violation of irreflexive algebraic property
:- type(irreflexive_violation(binaryRelation:string, fromConcept:string, toConcept:string)).
% As offending tuples can be duplicated, no primary constraint is imposed
% Also, by its definition, only valid domain elements are allowed. No need for further domain constraints

% Violation of asymmetric algebraic property
:- type(asymmetric_violation(binaryRelation:string, fromConcept:string, toConcept:string)).
% As offending tuples can be duplicated, no primary constraint is imposed
% Also, by its definition, only valid domain elements are allowed. No need for further domain constraints


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Concepts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Metadata relation "concepts":
% * Description:
%   - A relation used in any ontology for describing which are the involved concepts and relations of a ontology instance, i.e., it keeps the metadata about concepts and relations in the ontology. Entries in concepts describe part of the ontology instance
% * Relates:
%   - type: Either a relation or a non-relation concept
%   - id: Concept identifier as its known name
%   - arity: Number of concepts each concept relates. A relation can be n-ary, with n>=2 (no related concepts). A concept has arity 0 as it relates nothing
% * Example(s):
%   - concepts(concept, star, 0) is used to represent that the identifier "star" is used to represent the concept "star"
%   - concepts(relation, part_of, 2) is used to represent that the identifier "part_of" is used to represent a binary relation
% * Formalization:
%   concepts(type:string, id:string, arity:integer), where:
%     type \in {concept,relation}
%     id is an alphanumeric atom
%     arity >=0
% * Instance:
% Concepts:
%   - Objects:
concepts(concept, object_type, 0).
concepts(concept, object_instance, 0).
%   - Object types:
concepts(concept, universe, 0).
concepts(concept, galaxy, 0).
concepts(concept, planetary_system, 0).
concepts(concept, star, 0).
concepts(concept, planet, 0).
concepts(concept, satellite, 0).
%   - Object instances:
concepts(concept, 'Universe', 0).
concepts(concept, 'Milky Way', 0).
concepts(concept, 'Solar System', 0).
concepts(concept, 'Sun', 0).
concepts(concept, 'Earth', 0).
concepts(concept, 'Moon', 0).
% Domain-independent Relations:
concepts(relation, is_a, 2).
concepts(relation, part_of, 2).
concepts(relation, member_of, 2).
% Domain-dependent Relations:
concepts(relation, orbits, 2).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Algebraic and Intrinsic Properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Instance relation "algebraic_properties"
% * Description:
%   - A relation used in any ontology for describing the set of available algebraic properties, which can be attached to relations
% * Relates:
%   - algebraicProperty: A single identifier, which is the name of the algebraic property
% algebraic_properties(algebraicProperty)
% * Example(s):
%   - algebraic_properties(irreflexive) represents that an algebraic property named "irreflexive" is available to be used as an algebraic property of a relation
% * Formalization:
%   algebraic_properties(algebraicProperty:string), where:
%     AlgebraicProperty is an alphanumeric atom
% * Instance:
algebraic_properties(reflexive).
algebraic_properties(irreflexive).
algebraic_properties(asymmetric).
algebraic_properties(transitive).

% Instance relation "has_algebraic_property"
% * Description:
%   - A relation used in any ontology for describing the algebraic properties attached to relations for an ontology instance
% * Relates:
%   - relation: Concept identifier of the relation
%   - algebraicProperty: Identifier of the algebraic property
% algebraic_properties(AlgebraicProperty)
% * Example(s):
%   - has_algebraic_property(part_of, transitive) represents that the relation "part_of" has attached the algebraic property "transitive"
% * Formalization:
%   has_algebraic_property(relation:string, algebraicProperty:string), where:
%     relation, algebraicProperty are alphanumeric atoms
%     relation \in concepts.id (usual referential integrity constraint)
%     algebraicProperty \in algebraic_properties.algebraicProperty (usual referential integrity constraint)
% * Instance:
has_algebraic_property(is_a, reflexive).
has_algebraic_property(is_a, asymmetric).
has_algebraic_property(is_a, transitive).

has_algebraic_property(part_of, irreflexive).
has_algebraic_property(part_of, asymmetric).
has_algebraic_property(part_of, transitive).

has_algebraic_property(member_of, irreflexive).
has_algebraic_property(member_of, asymmetric).
has_algebraic_property(member_of, transitive).

has_algebraic_property(orbits, irreflexive).
has_algebraic_property(orbits, asymmetric).
has_algebraic_property(orbits, transitive).

% Instance relation "intrinsic_properties"
% * Description:
%   - A relation used in any ontology for describing the set of available intrinsic properties, which can be attached to concepts
% * Relates:
%   - intrinsicProperty: A single identifier, which is the name of the intrinsic property
% intrinsic_properties(IntrinsicProperty)
% * Example(s):
%   - intrinsic_properties(is_planet) represents that an intrinsic property named "is_planet" is available to be used as an intrinsic property of a relation
% * Formalization:
%   intrinsic_properties(intrinsicProperty:string), where:
%     intrinsicProperty is an alphanumeric atom
% * Instance:
intrinsic_properties(is_planet).
intrinsic_properties(is_satellite).
intrinsic_properties(is_planetary_system).
intrinsic_properties(is_galaxy).

% Instance relation "has_intrinsic_property"
% * Description:
%   - A relation used in any ontology for describing the intrinsic properties attached to concepts for an ontology instance
% * Relates:
%   - concept: Concept identifier of the relation
%   - intrinsicProperty: Identifier of the intrinsic property
% intrinsic_properties(intrinsicProperty)
% * Example(s):
%   - has_intrinsic_property(planet, is_planet) represents that the concept "planet" has attached the intrinsic property "is_planet"
% * Formalization:
%   has_intrinsic_property(concept:string, intrinsicProperty:string), where:
%     concept, intrinsicProperty are alphanumeric atoms
%     concept \in concepts.id (usual referential integrity constraint)
%     intrinsicProperty \in intrinsic_properties.intrinsicProperty (usual referential integrity constraint)
% * Instance:
has_intrinsic_property(planet,is_planet).
has_intrinsic_property(satellite,is_satellite).
has_intrinsic_property(planetary_system,is_planetary_system).
has_intrinsic_property(galaxy,is_galaxy).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Semantics of Predefined Binary Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Relation "part_of"
% * Description:
%   - Extensionally describes which concepts are parts of others
%   - Intensionally describes which concepts are parts of others
% * Formalization:
binary_relation(part_of,AInstance,BInstance) :-
  binary_relation(is_a,AType,object_type),
  binary_relation(is_a,AInstance,object_instance),
  binary_relation(is_a,BType,object_type),
  binary_relation(is_a,BInstance,object_instance),
  binary_relation(member_of,AInstance,AType),
  binary_relation(member_of,BInstance,BType),
  binary_relation(part_of,AType,BType).
  
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Semantics of Predefined Algebraic Properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Exclusion Properties
% ====================
%
% Algebraic property "irreflexive"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as an irreflexive relation, fulfilling:
%     |= ~ A -> A
%     Here, -> represents the binary relation, the symbol |= represents logical deducibility, and the symbol ~ represents negation
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   irreflexive(binaryRelation:string, fromConcept:string, toConcept:string), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.id (usual referential integrity constraint)
%     Intensional semantics:
%       irreflexive(BinaryRelation, From, To) :- 
%         not(irreflexive_violation(BinaryRelation, From, To)).
  
irreflexive_violation(BinaryRelation, From, From) :- 
  has_algebraic_property(BinaryRelation, irreflexive),
  binary_relation(BinaryRelation, From, From).

% Algebraic property "asymmetric"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as an asymmetric relation, fulfilling:
%     A -> B , A \= B |= ~ B -> A
%     Here, -> represents the binary relation, \= represents "are not equal", |= represents logical deducibility, and ~ represents negation
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   asymmetric(binaryRelation:string, fromConcept:string, toConcept:string), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.Id (usual referential integrity constraint)
%     Intensional semantics:
%       asymmetric(BinaryRelation, From, To) :-
%         not(asymmetric_violation(BinaryRelation, From, To)).
 
asymmetric_violation(BinaryRelation, From, To) :-
  has_algebraic_property(BinaryRelation, asymmetric),
  binary_relation(BinaryRelation, From, To),
  From \= To,
  binary_relation(BinaryRelation, To, From).


%
% Inclusion Properties
% ====================
%
% Algebraic property "transitive"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as a transitive relation, fulfilling:
%     A -> B, B -> C |= A -> C
%     Here, -> represents the binary relation, and the symbol |= represents logical deducibility
% * Enrollment:
%   - Inclusion constraint
%     This algebraic property sets the values that an instance relation must have, rather than forbidding values
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   transitive(binaryRelation, fromConcept, toConcept), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.id (usual referential integrity constraint)

binary_relation(BinaryRelation, From, To) :- 
  has_algebraic_property(BinaryRelation, transitive),
  binary_relation(BinaryRelation, From, Mid),
  binary_relation(BinaryRelation, Mid, To).

% Algebraic property "reflexive"
% * Description:
%   - Intensionally describes all the instance members of a given binary relation to be considered as a reflexive relation, fulfilling:
%     |= A -> A
%     Here, -> represents the binary relation, and the symbol |= represents logical deducibility
% * Enrollment:
%   - Inclusion constraint
%     This algebraic property sets the values that an instance relation must have, rather than forbidding values
% * Relates:
%   - binaryRelation: Concept identifier of the binary relation
%   - fromConcept: Origin concept
%   - toConcept: Destination concept
% * Formalization:
%   reflexive(binaryRelation, fromConcept, toConcept), where:
%     binaryRelation, fromConcept, toConcept are alphanumeric atoms
%     fromConcept, toConcept \in concepts.id (usual referential integrity constraint)

% BUG. Incorrectly translation of:
% binary_relation(BinaryRelation, A, A) :- 
%   has_algebraic_property(BinaryRelation, reflexive),
%   (binary_relation(BinaryRelation, A, _) 
%    ;
%    binary_relation(BinaryRelation, _, A)).
% into:
% binary_relation(BinaryRelation,A,A) :-
%   has_algebraic_property(BinaryRelation,reflexive),
%   binary_relation(BinaryRelation,A,B).
% binary_relation(BinaryRelation,A,A) :-
%   binary_relation(BinaryRelation,C,A).
% Use the following formulation instead:

binary_relation(BinaryRelation, A, A) :- 
  has_algebraic_property(BinaryRelation, reflexive),
  binary_relation(BinaryRelation, A, _).
binary_relation(BinaryRelation, A, A) :- 
  has_algebraic_property(BinaryRelation, reflexive),
  binary_relation(BinaryRelation, _, A).

direct_part_of(X,Y) :-
  binary_relation(part_of,X,Y),
  not indirect_part_of(X,Y).
  
indirect_part_of(X,Y) :-
  binary_relation(part_of,X,Z),
  binary_relation(part_of,Z,Y).
  
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Semantics of Domain-dependent Intrinsic Properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Intrinsic property "is_planet"
% * Description:
%   - Describes the properties that a planet P must fulfill: P must orbit a star and there must not be any orbiting other object in-between
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - concept: Concept identifier of the planet
% * Formalization:
%   is_planet(Concept), where:
%     Concept is an alphanumeric atom
%     Concept \in concepts.id (usual referential integrity constraint)
is_planet(X) :-
  binary_relation(member_of,Y,star),
  binary_relation(orbits,X,Y),
  not(intermediate_object(X,Y)).
  
intermediate_object(X,Y) :-
  binary_relation(orbits,X,Z),
  binary_relation(orbits,Z,Y).
  
is_planet_violation(Planet) :-
  binary_relation(member_of,Planet,planet), 
  not(is_planet(Planet)).
  
  
% Intrinsic property "is_satellite"
% * Description:
%   - Describes the properties that a satellite S must fulfill: S must orbit a planet and there must not be any orbiting other object in-between
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - concept: Concept identifier of the satellite
% * Formalization:
%   is_satellite(Concept), where:
%     Concept is an alphanumeric atom
%     Concept \in concepts.id (usual referential integrity constraint)
is_satellite(X) :-
  binary_relation(member_of,Y,planet),
  binary_relation(orbits,X,Y),
  not(intermediate_object(X,Y)).
  
is_satellite_violation(Satellite) :-
  binary_relation(member_of,Satellite,satellite), 
  not(is_satellite(Satellite)).
  
  
% Intrinsic property "is_planetary_system"
% * Description:
%   - Describes the properties that a planetary system S must fulfill: 
%     S must include a star and a planet, at the least
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - concept: Concept identifier of the planetary system
% * Formalization:
%   is_planetary_system(Concept), where:
%     Concept is an alphanumeric atom
%     Concept \in concepts.id (usual referential integrity constraint)
is_planetary_system(X) :-
  binary_relation(is_a,X,object_instance),
  binary_relation(member_of,X,planetary_system),
  direct_part_of(S,X),
  binary_relation(member_of,S,star),
  direct_part_of(P,X),
  binary_relation(member_of,P,planet).
  
is_planetary_system_violation(PlanetarySystem) :-
  binary_relation(member_of,PlanetarySystem,planetary_system), 
  not(is_planetary_system(PlanetarySystem)).

    
% Intrinsic property "is_galaxy"
% * Description:
%   - Describes the properties that a galaxy G must fulfill: 
%     G must include a star, at the least
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - concept: Concept identifier of the galaxy
% * Formalization:
%   is_galaxy(Concept), where:
%     Concept is an alphanumeric atom
%     Concept \in concepts.id (usual referential integrity constraint)
is_galaxy(GI) :-
  binary_relation(is_a,GI,object_instance),
  binary_relation(member_of,GI,galaxy),
  binary_relation(is_a,SI,object_instance),
  binary_relation(part_of,SI,GI),
  binary_relation(member_of,SI,star).
  
is_galaxy_violation(Galaxy) :-
  binary_relation(member_of,Galaxy,galaxy), 
  not(is_galaxy(Galaxy)).

% Intrinsic property "is_object"
% * Description:
%   - An object can be either a type or an instance, but not both at the same time
% * Enrollment:
%   - Exclusion constraint
% * Relates:
%   - concept: Concept identifier
% * Formalization:
%   is_object(Concept), where:
%     Concept is an alphanumeric atom
%     Concept \in concepts.id (usual referential integrity constraint)

is_object(Object) :-
  concepts(concept, Object, 0),
  not(is_object_violation(Object)).

is_object_violation(Object) :-
  binary_relation(is_a, Object, object_type),
  binary_relation(is_a, Object, object_instance).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ontology Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Metadata relation "binary_relation":
% * Description:
%   - A relation used in any ontology for describing which are the involved binary relations of an ontology instance, i.e., it keeps the metadata about binary relations in the ontology. Entries in binary_relation describe part of the ontology instance
% * Relates:
%   - relation identifier: Concept identifier as used in metadata relation "concepts"
%   - fromConcept identifier: Origin concept identifier in a binary relation as used in metadata relation "concepts"
%   - toConcept identifier: Destination concept identifier in a binary relation as used in metadata relation "concepts"
% * Example(s):
%   - binary_relation(part_of, star, planetary_system) is intended to represent the knowledge "a star is a part of a planetary system"
% * Formalization:
%   binary_relation(relation:string, fromConcept:string, toConcept:string), where:
%     relation, fromConcept, toConcept are alphanumeric atoms
%     relation, fromConcept, toConcept \in concepts.id (usual referential integrity constraint)
% * Instance:
binary_relation(orbits, 'Earth', 'Sun').
binary_relation(orbits, 'Moon', 'Earth').

binary_relation(is_a, universe,         object_type).
binary_relation(is_a, galaxy,           object_type).
binary_relation(is_a, planetary_system, object_type).
binary_relation(is_a, star,             object_type).
binary_relation(is_a, planet,           object_type).
binary_relation(is_a, satellite,        object_type).

binary_relation(is_a, 'Universe',     object_instance).
binary_relation(is_a, 'Milky Way',    object_instance).
binary_relation(is_a, 'Solar System', object_instance).
binary_relation(is_a, 'Sun',          object_instance).
binary_relation(is_a, 'Earth',        object_instance).
binary_relation(is_a, 'Moon',         object_instance).

binary_relation(part_of, galaxy,           universe).
binary_relation(part_of, planetary_system, galaxy).
binary_relation(part_of, star,             planetary_system).
binary_relation(part_of, planet,           planetary_system).
binary_relation(part_of, satellite,        planetary_system).

binary_relation(member_of, 'Sun',          star).
binary_relation(member_of, 'Earth',        planet).
binary_relation(member_of, 'Moon',         satellite).
binary_relation(member_of, 'Solar System', planetary_system).
binary_relation(member_of, 'Milky Way',    galaxy).
binary_relation(member_of, 'Universe',     universe).

% Intensionally derived:
%
% binary_relation(part_of, 'Milky Way',    'Universe').
% binary_relation(part_of, 'Solar System', 'Milky Way').
% binary_relation(part_of, 'Sun',          'Solar System').
% binary_relation(part_of, 'Earth',        'Solar System').
% binary_relation(part_of, 'Moon',         'Solar System').

%   the next entry is incorrect w.r.t. the algebraic property "irreflexive" attached to "part_of" (as binary_relation(part_of,A,A) is not allowed):
%binary_relation(part_of, star, star).
%   the next entry is incorrect w.r.t. the algebraic property "asymmetric" attached to "part_of" (as there is already an entry of the form binary_relation(part_of, star, planetary_system)):
%binary_relation(part_of, planetary_system, star).
%   the next entry is incorrect w.r.t. the set of algebraic properties "asymmetric" and "transitive" attached to "part_of" (as there would be a cyclic path):
%binary_relation(part_of, galaxy, planet).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constraint Checking
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This part is devoted to examine consistency of the instance 
% ontology w.r.t. ontology constraints, i.e., algebraic 
% properties attached to relations and intrinsic properties
% attached to concepts under a relation 

% The following are strong constraints which are
% checked whenever any data related to their definition are updated
% Only exclusion properties are checked
% Inclusion constraints are intensionally stated

% Built-in Algebraic Properties
:- irreflexive_violation(BinaryRelation, From, To).
:- asymmetric_violation(BinaryRelation, From, To).

% Domain-dependent Intrinsic Properties
:- is_planet_violation(Planet).
:- is_satellite_violation(Satellite).
:- is_planetary_system_violation(PlanetarySystem).
:- is_galaxy_violation(Galaxy).
:- is_object_violation(Object).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% System Session Example
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% *********************************************************
% *                                                       *
% *        DES: Datalog Educational System v.Devel        *
% *                                                       *
% * Type "/help" for help about commands                  *
% *                                                       *
% *                    Fernando Saenz-Perez (c) 2004-2014 *
% *                                         DISIA GPD UCM *
% *             Please send comments, questions, etc. to: *
% *                                     fernan@sip.ucm.es *
% *                                             Web site: *
% *                           http://des.sourceforge.net/ *
% *                                                       *
% * This program comes with ABSOLUTELY NO WARRANTY, is    *
% * free software, and you are welcome to redistribute it *
% * under certain conditions. Type "/license" for details *
% *********************************************************

% DES> /p examples/ontology/cosmos          

% Info: Processing file 'examples/ontology/cosmos.ini' ...

% DES> /compact_listings on
% DES> /consult examples/ontology/cosmos
% Info: 86 rules consulted.                   
% Info: 25 constraints consulted.
% DES> % Trying to assert a concept of incorrect arity:
% DES> /assert concepts(concept,'Venus',1)
% Error: Integrity constraint violation.      
%        ic(Id,Arity) :-
%          concepts(concept,Id,Arity),
%          Arity\=0.
%        Offending values in database: [ic(Venus,1)]
% DES> % Trying to assert a concept of incorrect type:
% DES> /assert concepts(concepto,'Venus',0)
% Error: Integrity constraint violation.      
%        ic(Type,Id,Arity) :-
%          concepts(Type,Id,Arity),
%          Type\=concept,
%          Type\=relation.
%        Offending values in database: [ic(concepto,Venus,0)]
% DES> % Trying to assert a binary relation relating an unknown concept:
% DES> /assert binary_relation(member_of, 'Venus', planet)  
% Error: Foreign key violation binary_relation.[fromConcept]->concepts.[id]
%        when trying to insert: binary_relation(member_of,Venus,planet)
% DES> % Trying to assert an unknown binary relation:
% DES> /assert binary_relation(space_flight, 'Earth', 'Moon') 
% Error: Foreign key violation binary_relation.[relation]->concepts.[id]
%        when trying to insert: binary_relation(space_flight,Earth,Moon)
% DES> % Trying to assert an incorrect fact: a planet which are not directly orbiting a star:
% DES> /assert binary_relation(member_of, 'Moon', planet) 
% Error: Integrity constraint violation.      
%        ic(Planet) :-
%          is_planet_violation(Planet).
%        Offending values in database: [ic(Moon)]
% DES> % A star and a planet must be a direct part of a planetary system:
% DES> /assert binary_relation(member_of, 'Milky Way', planetary_system) 
% Error: Integrity constraint violation.      
%        ic(BinaryRelation,From,To) :-
%          irreflexive_violation(BinaryRelation,From,To).
%        Offending values in database: [ic(part_of,Milky Way,Milky Way)]
% DES> % Earth cannot be an object type because it is already asserted as an object instance:
% DES> /assert binary_relation(is_a, 'Earth', object_type) 
% Error: Integrity constraint violation.      
%        ic(Object) :-
%          is_object_violation(Object).
%        Offending values in database: [ic(Earth)]
