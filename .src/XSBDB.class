' Gambas class file

Inherits ODBCDB

Public xsb As String
Public xsb_engine As XSBEngine
Public Datalog_con As DatalogConnection
Public con As New Connection
Public original As New String[]

Public Sub _new(xsb_ As String)
  ' Constructor - all other arguments are consumed by ODBCDB constructor!
  Me.xsb = xsb_
  
  Me.connection_settings["connection type"] = "XSB"
  Me.connection_settings["xsb"] = xsb
End

Public Sub close()
  ' close the connection
  xsb_engine.close()
  con.Close()
End


Public Sub connect(Optional caller As Object = Null)
  ' connect to the database
  xsb_engine = New XSBEngine(Me.xsb)
  Try Datalog_con = New DatalogConnection(xsb_engine, Me.dsn, Me.username, Me.password)
  If Error Then
    Error.Propagate()
  Endif
  Try Datalog_con.connect(caller)
  If Error Then
    Error.Propagate()
  Endif
  With con
    .Type = "odbc"
    .Host = Me.dsn
    .Login = Me.username
    .Password = Me.password
    .Name = ""
    Try .Open
    If Error Then
      Error.Propagate()
    Endif
    If .Opened = False Then
      Error.Raise("ODBC connection won't open!")
    Endif
  End With
End

Public Function executeDatalog(query As String, Optional distinct As Boolean = False) As Object[]
  ' execute a query and return the results
  Dim results As Object[]
  results = Datalog_con.execute(query, True, distinct)
  If results.Count = 0 Then
    con.Close
    connect()
    refresh_db_tree(True)
  Endif
  Return results
End

Public Function execute(query As String, Optional no_messages As Boolean) As Object[]
  ' execute a query and return the results
  Dim res As Result 'Object[]
  Dim rfield As ResultField
  Dim resultArray As New Object[]
  Dim one_line As Collection
  Dim cmd As String
  Dim context As New Collection
  Dim field_name As String
  Dim counter As Collection
  original = New String[]
  ' TODO: this is buggy, try to edit below
  Try res = con.Exec(rewrite_query(query))
  If Error Then 
    If Not no_messages Then
      Message.Info(Error.Text)
    Endif
    Return Null
  Endif
  If Not IsNull(res) Then
    For Each res
      one_line = New Collection
      counter = New Collection
      For Each rfield In res.Fields
        If counter.Exist(rfield.Name) Then
          counter[rfield.Name] += 1
          field_name = rfield.Name & "_" & Str(counter[rfield.Name])
        Else
          field_name = rfield.Name
          counter[rfield.Name] = 0
        Endif
        context["res"] = res
        cmd = "res!" & rfield.Name
        one_line.Add(Eval(cmd, context), field_name)
      Next
      resultArray.Add(one_line)
    Next
    
  Endif
  Return resultArray
End

' Public Sub get_db_objects() As Collection
'   ' get the database objects (tables, views, indices, functions, triggers, sequences, user defined datatypes)
'   Dim objects As New Collection
'   Dim tables, views, indices, functions, triggers, sequences, types, languages As String
'   Dim row As Object
'   Dim dbtype As String
'   
'   dbtype = Me.test_db_type()
'   
'   ' Select dbtype
'   '   Case "sqlite"
'   ' End Select
'   
'   tables = "odbc_get_schema( accessible(_), _L ), member( Table, _L )."
'   views = ""
'   indices = ""
'   functions = ""
'   triggers = ""
'   sequences = ""
'   types = ""
'   languages = ""
'   
'   objects["tables"] = executeDatalog(tables)
'   For Each row In objects["tables"]
'     row["table"] = row["Table"]
'     row.Remove("Table")
'   Next
'   objects["views"] = New Collection 'execute(views)
'   objects["indices"] = New Collection 'execute(indices)
'   objects["functions"] = New Collection 'execute(functions)
'   objects["triggers"] = New Collection 'execute(triggers)
'   objects["sequences"] = New Collection 'execute(sequences)
'   objects["types"] = New Collection 'execute(types)
'   objects["languages"] = New Collection 'execute(languages)
'   
'   objects["attributes"] = New Collection
'   For Each row In objects["tables"]
'     objects["attributes"][row["table"]] = executeDatalog("odbc_get_schema( columns( '" & row["table"] & "' ), _L ), member( C, _L ).")
'   Next
'   
'   objects["object types"] = [ 
'     "tables": "table.png"] ', 
'     ' "views": "view.png", 
'     ' "indices": "index.png", 
'     ' "functions": "function.png", 
'     ' "triggers": "trigger.png", 
'     ' "sequences": "sequence.png",
'     ' "types": "data_type.png"]
'   Return objects
' End




Public Sub initialize_gui()
  ' initialize the GUI for PostgreSQL database
  Dim documentation As New WebView(FMain.main_tabstrip)
  Dim data_definition As FormXSBDataDefinition
  Dim data_manipulation As FormXSBDataManipulation
  Dim data_querying As FormXSBDataQuerying
  
  ' create a dummy tab 
  FMain.main_tabstrip.Text = "XSB Database - " & Me.dsn
  documentation.Frame.Url = "http://www.cs.sunysb.edu/~sbprolog/manual1/index.html"
  
  ' create the treeview
  ' first get objects from the database
  refresh_db_tree(True)
  
  ' create the tool panel
  data_definition = New FormXSBDataDefinition(FMain.main_toolpanel)
  FMain.main_toolpanel.Index = 1
  data_manipulation = New FormXSBDataManipulation(FMain.main_toolpanel)
  FMain.main_toolpanel.Index = 2
  data_querying = New FormXSBDataQuerying(FMain.main_toolpanel)
  
  ' show the data definition tab
  FMain.main_toolpanel.Index = 0
  
End

Public Sub refresh_db_tree(Optional load_modules As Boolean = False)
  ' refresh the main tree view
  Dim objects As Collection
  Dim tab As Collection
  Dim o, temp_file As String
  FMain.main_treeview.Clear
  objects = Me.get_db_objects()  
  FMain.main_treeview.Add("Tables", "Tables", Picture.Load("images/directory.png"))
  For Each tab In objects["tables"]
    FMain.main_treeview.Add("tab_" & tab["table"], tab["table"], Picture.Load("images/" & objects["object types"]["tables"]), "Tables")
  Next
  FMain.main_treeview.Add("Datalog modules", "Datalog modules", Picture.Load("images/directory.png"))
  For Each o In Me.dbobjects["datalog modules"]
    FMain.main_treeview.Add(Me.dbobjects["datalog modules"].key, Me.dbobjects["datalog modules"].key, Picture.Load("images/module.png"), "Datalog modules")
    If load_modules Then
      temp_file = Me.temporary_folder & "/" & Me.dbobjects["datalog modules"].key
      File.Save(temp_file, Me.dbobjects["datalog modules"][Me.dbobjects["datalog modules"].key])
      Try datalog_con.load(temp_file)
      If Error Then
        Message.Error(Error.Text)
        Return
      Endif
    Endif
  Next
  
  If Me.dbtype <> Null Then
    FMain.main_treeview.Add("Views", "Views", Picture.Load("images/directory.png"))
    For Each tab In objects["views"]
      FMain.main_treeview.Add("viw_" & tab["view"], tab["view"], picture.Load("images/" & objects["object types"]["views"]), "Views")
    Next
    FMain.main_treeview.Add("Indices", "Indices", Picture.Load("images/directory.png"))
    For Each tab In objects["indices"]
      FMain.main_treeview.Add("ind_" & tab["index"], tab["index"], picture.Load("images/" & objects["object types"]["indices"]), "Indices")
    Next
    FMain.main_treeview.Add("Triggers", "Triggers", Picture.Load("images/directory.png"))
    For Each tab In objects["triggers"]
      FMain.main_treeview.Add("tri_" & tab["trigger"] & " on " & tab["table"], tab["trigger"] & " on " & tab["table"], picture.Load("images/" & objects["object types"]["triggers"]), "Triggers")
    Next
    If Me.dbtype = "postgresql" Then
      FMain.main_treeview.Add("Functions", "Functions", Picture.Load("images/directory.png"))
      For Each tab In objects["functions"]
        FMain.main_treeview.Add("fun_" & tab["function"] & "(" & tab["arguments"] & ")", tab["function"] & "(" & tab["arguments"] & ")", picture.Load("images/" & objects["object types"]["functions"]), "Functions")
      Next
      FMain.main_treeview.Add("Sequences", "Sequences", Picture.Load("images/directory.png"))
      For Each tab In objects["sequences"]
        FMain.main_treeview.Add("seq_" & tab["sequence"], tab["sequence"], picture.Load("images/" & objects["object types"]["sequences"]), "Sequences")
      Next
      FMain.main_treeview.Add("Types", "Types", Picture.Load("images/directory.png"))
      For Each tab In objects["types"]
        FMain.main_treeview.Add("typ_" & tab["user_type"], tab["user_type"], picture.Load("images/" & objects["object types"]["types"]), "Types")
      Next
    Endif
  Endif
  ' create Baze object containers
  With FMain.main_treeview
    .Add("Queries", "Queries", Picture.Load("images/directory.png"))
    .Add("Insert queries", "Insert queries", Picture.Load("images/directory.png"), "Queries")
    For Each o In Me.dbobjects["queries"]["insert queries"]
      .Add(Me.dbobjects["queries"]["insert queries"].key, Me.dbobjects["queries"]["insert queries"].key, Picture.Load("images/query.png"), "Insert queries")
    Next
    .Add("Delete queries", "Delete queries", Picture.Load("images/directory.png"), "Queries")
    For Each o In Me.dbobjects["queries"]["delete queries"]
      .Add(Me.dbobjects["queries"]["delete queries"].key, Me.dbobjects["queries"]["delete queries"].key, Picture.Load("images/query.png"), "Delete queries")
    Next
    .Add("Datalog queries", "Datalog queries", Picture.Load("images/directory.png"), "Queries")
    For Each o In Me.dbobjects["queries"]["datalog queries"]
      .Add(Me.dbobjects["queries"]["datalog queries"].key, Me.dbobjects["queries"]["datalog queries"].key, Picture.Load("images/query.png"), "Datalog queries")
    Next
    .Add("SQL queries", "SQL queries", Picture.Load("images/directory.png"), "Queries")
    For Each o In Me.dbobjects["queries"]["sql queries"]
      .Add(Me.dbobjects["queries"]["sql queries"].key, Me.dbobjects["queries"]["sql queries"].key, Picture.Load("images/query.png"), "SQL queries")
    Next
    ' TODO: return these later when QBE is implemented
    '.Add("QBE queries", "QBE queries", Picture.Load("images/directory.png"), "Queries")
    'For Each o In Me.dbobjects["queries"]["qbe queries"]
    '  .Add(o, o, Picture.Load("images/query.png"), "QBE queries")
    'Next
    .Add("Forms", "Forms", Picture.Load("images/directory.png"))
    For Each o In Me.dbobjects["forms"]
      .Add(o, o, Picture.Load("images/query.png"), "Forms")
    Next
    .Add("Scripts", "Scripts", Picture.Load("images/directory.png"))
    .Add("Python", "Python", Picture.Load("images/directory.png"), "Scripts")
    .Add("R", "R", Picture.Load("images/directory.png"), "Scripts")
    .Add("NodeJS", "NodeJS", Picture.Load("images/directory.png"), "Scripts")
    For Each o In Me.dbobjects["scripts"]["python"]
      .Add(Me.dbobjects["scripts"]["python"].key, Me.dbobjects["scripts"]["python"].key, Picture.Load("images/module.png"), "Python")
    Next
    For Each o In Me.dbobjects["scripts"]["r"]
      .Add(Me.dbobjects["scripts"]["r"].key, Me.dbobjects["scripts"]["r"].key, Picture.Load("images/module.png"), "R")
    Next
    For Each o In Me.dbobjects["scripts"]["nodejs"]
      .Add(Me.dbobjects["scripts"]["nodejs"].key, Me.dbobjects["scripts"]["nodejs"].key, Picture.Load("images/module.png"), "NodeJS")
    Next
    .Add("Reports", "Reports", Picture.Load("images/directory.png"))
    For Each o In Me.dbobjects["reports"]
      .Add(o, o, Picture.Load("images/query.png"), "Reports")
    Next
  End With
End

Public Function rewrite_query(query As String) As String
  ' rewrite the query to return distinct column names
  Dim has_asterisk As String[]
  Dim defined_limit As String[]
  Dim replace_limit As String
  Dim query_copy As String
  Dim res As Result
  Dim rfield As ResultField
  Dim with_string As String
  Dim i As Integer
  has_asterisk = AUX.FindAll(query, "(?i)select (.*?[\\*].*?) from", 1)
  If has_asterisk.Count > 0 Then
    query_copy = query
    defined_limit = AUX.FindAll(query, "(?i)(limit +[0-9]+)", 1)
    If defined_limit.Count > 0 Then
      For Each replace_limit In defined_limit
        query = Replace(query, replace_limit, "LIMIT 1")
      Next
    Else
      query &= " LIMIT 1"
    Endif
    res = con.Exec(query)
    For Each res
      For Each rfield In res.Fields
        original.Push(rfield.name)
      Next
    Next
    If original.Count = 0 Then
      Return query_copy
    Endif
    with_string = "WITH query("
    For i = 0 To original.Max
      with_string &= "a" & Str(i) & ", "
    Next
    with_string = Left$(with_string, -2) & ") AS (" & query_copy & ") SELECT * FROM query"
    Return with_string
  Else
    Return query
  Endif
End

Public Sub new_sql_query(ttitle As String, tquery As String, Optional ttype As String)
  ' create new sql query and store it in dbobjects
  If ttype Then
     Me.dbobjects["queries"][ttype][ttitle] = tquery
  Else
     Me.dbobjects["queries"]["sql queries"][ttitle] = tquery
  Endif
  Me.Save()
End

Public Sub rename_table(old_name As String, new_name As String)
  ' rename a table in the database
  execute("ALTER TABLE \"" & FMain.pg_escape(old_name) & "\" RENAME TO \"" & FMain.pg_escape(new_name) & "\"")
End

Public Sub new_datalog_module(name As String, code As String)
  ' create a temporary file, load it into XSB and save it into the .baze file
  Dim temp_file As String
  temp_file = Me.temporary_folder & "/" & name
  File.Save(temp_file, code)
  Try datalog_con.load(temp_file)
  If Error Then
    Message.Error(Error.Text)
    Return
  Endif
  Me.dbobjects["datalog modules"][name] = code
  Me.Save()
  Message.Info("Module compiled and loaded successfully!")
End

Public Sub delete_datalog_module(module As String)
  ' delete and unload the module
  Dim temp_file As String
  temp_file = Me.temporary_folder & "/" & module
  File.Save(temp_file, "")
  Try datalog_con.load(temp_file)
  If Error Then
    Message.Error(Error.Text)
    Return
  Endif
  Me.dbobjects["datalog modules"][module] = Null
  Me.Save()
End

Public Function initialize_editor(parent As Control) As Variant
  ' return editor for document of this database type
  Return New FormSQLSplit(parent)
End