' Gambas class file

' return value from intro wizard
' can be canceled (if canceled), 
' new (if new file has to be created)
' a filename (if the file should be opened)
' connection (if a new connection should be established)
Public wizard_return As String
' if wizard_return is connection then here are the settings
' else null
Public connection_settings As Collection
' current file we are working on
Public current_file As String
' password entered by user
Public password As String
' the db connection
Public db As Variant
' main tab strip
Public main_tabstrip As TabStrip
' main tree view
Public main_treeview As TreeView
' main tool panel
Public main_toolpanel As ToolPanel
' main table for editing form and report elements
Public main_application_css As TableView
' inbox for a canceled request
Public request_canceled As Boolean
' inbox for a changed table name
Public table_name As String
' inbox for a changed form name
Public form_name As String
' inbox for a new script name
Public script_name As String
Public script_type As String
' open wizard
Public wiz As FormOpenWizard
' dbtype if new
Public new_db_type As String
' Open subprocesses (DES mainly)
Public processes As Process[]
  
Public Sub _new()
  ' make components visible to DB classes
  Me.main_tabstrip = TabStripMain
  Me.main_treeview = TreeViewMain
  Me.main_toolpanel = ToolPanelMain
  Me.main_application_css = TableViewApplicationElementCSS
  Me.processes = New Process[]
End

Public Sub save_close() As Boolean
  ' close database connections if any
  Dim proc As Process
  Try db.Save()
  Try db.close()
  Try RelationalDB.clean_generated_dsns()
  For Each proc In Me.processes
    Try proc.Kill()
  Next
  Quit
End

Public Sub Close(Optional ret As Integer) As Boolean
  ' close all database connections if any
  If False Then
    Print ret
  Endif
  save_close()
End

Public Sub Form_Hide()
  ' close all database connections if any
  save_close()
End

Public Sub handle_user_request()
  ' handle the users request
  ' open the wizard first
  display_home_window:
  wiz = New FormOpenWizard
  wiz.ShowModal()
  Try wiz.Delete
  If wizard_return = "canceled" Then ' wizard cancelled, close app
    Me.save_close()
    Return
  Else
      If wizard_return = "connection" Then ' create a new connection
        If connection_settings = Null Then ' no connection settings supplied (X button), close app
          Me.save_close
          Return
        End If
        save_file_as()
        db = connection_settings["connection"]
        db.baze_file = current_file
        db.new_file()
        db.initialize_dbobjects()
        db.initialize_gui()
        shift_recent_files(current_file)
      Else
        If wizard_return = "new" Then ' create a new (internal) baze file
          save_file_as()
          If current_file Then
            If new_db_type = "ZODB" Then
              db = New ZODBEmbedded("baze.fs")
            Else
              db = New SQLiteDBEmbedded("baze.sqlite", "baze.sqlite") 'FIXME: Why two arguments? Check how inheritance works in Gambas3
            Endif
            db.baze_file = current_file
            db.new_file()
            shift_recent_files(current_file)
            If db.connect() Then
              db.initialize_gui()
            Endif
          Else
            Return
          Endif
        Else
          ' open an existing file
          db = New DBaze
          current_file = wizard_return
          Try db = db.load_file(wizard_return)
          If Error
            Goto display_home_window
          Endif
          db.initialize_gui()
          shift_recent_files(current_file)
        End If
      End If
  Endif 
End

Public Sub Form_Open()
  ' setup the main window horizontal split
  HSplitMain.Settings = [1, 4, 1]
  handle_user_request()
End

Public Sub save_file_as()
  ' save the newly created file
  ' add .baze file extension if none specified
  again:
  Dialog.Filter = ["*.baze", "Baze file"]
  
  If Dialog.SaveFile() Then 
    handle_user_request()
    Return
  Endif
  current_file = Dialog.Path
  If String.Right(current_file, 5) <> ".baze" And Not Exist(current_file) Then current_file &= ".baze"
  Catch
    Message.Info(Error.Text)
    save_file_as()
End

Public Sub shift_recent_files(next_file As String)
  ' shift the settings and add next_file on top
  If next_file <> Settings["FormOpenWizard/sixth"] And next_file <> Settings["FormOpenWizard/fifth"] And next_file <> Settings["FormOpenWizard/fourth"] And next_file <> Settings["FormOpenWizard/third"] And next_file <> Settings["FormOpenWizard/second"] And next_file <> Settings["FormOpenWizard/first"] Then
    Settings["FormOpenWizard/sixth"] = Settings["FormOpenWizard/fifth"]
    Settings["FormOpenWizard/fifth"] = Settings["FormOpenWizard/fourth"]
    Settings["FormOpenWizard/fourth"] = Settings["FormOpenWizard/third"]
    Settings["FormOpenWizard/third"] = Settings["FormOpenWizard/second"]
    Settings["FormOpenWizard/second"] = Settings["FormOpenWizard/first"]
    Settings["FormOpenWizard/first"] = next_file
    Settings.Save()
  Endif
End

Public Sub TreeViewMain_Menu()
 ' show the appropriate menu in the tree view
 Dim ckey As String
  Select TreeViewMain.Current.ParentKey
    Case "Tables"
       MenuTreeTable.Popup()
    Case "Views"
      MenuTreeView.Popup()
    Case "Indices"
      MenuTreeIndex.Popup()
    Case "Functions"
      MenuTreeFunction.Popup()
    Case "Triggers"
      MenuTreeTrigger.Popup()
    Case "Sequences"
      MenuTreeSequence.Popup()
    Case "Types"
      MenuTreeType.Popup()
    Case "Datalog modules"
      MenuDatalogModules.Popup()
    Case "Datalog rules"
      MenuDatalogRules.Popup()
    Case "Update queries"
      MenuQuery.Popup()
    Case "Insert queries"
      MenuQuery.Popup()
    Case "Delete queries"
      MenuQuery.Popup()
    Case "SQL queries"
      MenuQuery.Popup()
    Case "QBE queries"
      MenuQuery.Popup()
    Case "Datalog queries"
      MenuQuery.Popup()
    Case "Rename queries"
      MenuQuery.Popup()
    Case "Replace queries"
      MenuQuery.Popup()
    Case "Value queries"
      MenuQuery.Popup()
    Case "xPath queries"
      MenuQuery.Popup()
    Case "xQueries"
      MenuQuery.Popup()
    Case "PyMapReduce queries"
      MenuQuery.Popup()
    Case "Insert rule queries"
      MenuInsertRuleQuery.Popup()
    Case "Delete rule queries"
      MenuDeleteRuleQuery.Popup()
    Case "Flora2 queries"
      MenuFlora2Query.Popup()
    Case "Modules"
      MenuFlora2Modules.Popup()
    Default
      Try ckey = Left$(TreeViewMain.Current.Key, 4)
      If Error Then
        Return
      Endif
      If ckey = "col_" Then
        MenuCollection.Popup()
      Endif
      If ckey = "doc_" Then
        MenuDocument.Popup()
      Endif
  End Select
End

Public Sub pg_escape(repl_string As String) As String
  ' escape "-characters in a string
  Return Replace(repl_string, "\"", "\"\"")  
End

Public Sub MenuDropTable_Click()
  ' drop the table
  If Message.Question("Are you sure that you want to drop table " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP TABLE \"" & pg_escape(TreeViewMain.Current.Text) & "\"", True)) Then
      If Message.Question("Error while dropping table probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP TABLE \"" & pg_escape(TreeViewMain.Current.Text) & "\" CASCADE")) Then
           Message.Error("Error while dropping table " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuAlterTable_Click()
  ' open the alter table form
  ' open table designer
  Dim ask As New FormRenameTable
  Dim table_designer As Variant
  ask.caller = Me
  request_canceled = False
  ask.TextBoxTableName.Text = main_treeview.Current.Text
  ask.ShowModal()
  If Not request_canceled Then
    FMain.main_tabstrip.count += 1
    Select Object.Class(db).Name 
      Case "PostgreSQLDB"
        table_designer = New FormPostgreSQLAlterTable(FMain.main_tabstrip)
      Case "SQLiteDB"
        table_designer = New FormSQLiteAlterTable(FMain.main_tabstrip)
    End Select

    If main_treeview.Current.Text <> table_name Then
      db.rename_table(main_treeview.Current.Text, table_name)
      db.refresh_db_tree()
    Endif
    FMain.main_tabstrip.Text = table_name & " - Alter table"
  Endif
End

Public Sub MenuDeleteModule_Click()
  ' drop the type
  If Message.Question("Are you sure that you want to delete module " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    db.delete_datalog_module(TreeViewMain.Current.Text)
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDropView_Click()
  ' drop the view
  If Message.Question("Are you sure that you want to drop view " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP VIEW \"" & pg_escape(TreeViewMain.Current.Text) & "\"", True)) Then
      If Message.Question("Error while dropping view probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP VIEW \"" & pg_escape(TreeViewMain.Current.Text) & "\" CASCADE")) Then
           Message.Error("Error while dropping view " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDropIndex_Click()
  ' drop the index
  If Message.Question("Are you sure that you want to drop index " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP INDEX \"" & pg_escape(TreeViewMain.Current.Text) & "\"", True)) Then
      If Message.Question("Error while dropping index probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP INDEX \"" & pg_escape(TreeViewMain.Current.Text) & "\" CASCADE")) Then
           Message.Error("Error while dropping index " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDropSequence_Click()
  ' drop the sequence
  If Message.Question("Are you sure that you want to drop sequence " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP SEQUENCE \"" & pg_escape(TreeViewMain.Current.Text) & "\"", True)) Then
      If Message.Question("Error while dropping sequence probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP SEQUENCE \"" & pg_escape(TreeViewMain.Current.Text) & "\" CASCADE")) Then
           Message.Error("Error while dropping SEQUENCE " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
  
End

Public Sub MenuDropType_Click()
  ' drop the type
  If Message.Question("Are you sure that you want to drop type " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP TYPE \"" & pg_escape(TreeViewMain.Current.Text) & "\"", True)) Then
      If Message.Question("Error while dropping sequence probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP TYPE \"" & pg_escape(TreeViewMain.Current.Text) & "\" CASCADE")) Then
           Message.Error("Error while dropping type " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDropFunction_Click()
  ' drop the function
  Dim func As String
  Dim params As String
  func = TreeViewMain.Current.Text
  params = XSBEngine.findall(func, "(.*)[(]([^(]*)[)]", 2)[0]
  func = XSBEngine.findall(func, "(.*)[(]([^(]*)[)]", 1)[0]
  If params = ")" Then params = ""
  If Message.Question("Are you sure that you want to drop function " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP FUNCTION \"" & pg_escape(func) & "\"" & "(" & params & ")", True)) Then
      If Message.Question("Error while dropping function probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP FUNCTION \"" & pg_escape(func) & "\"" & "(" & params & ")" & " CASCADE")) Then
           Message.Error("Error while dropping function " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDropTrigger_Click()
  ' drop the trigger
  Dim trigger As String
  Dim tbl As String
  trigger = TreeViewMain.Current.Text
  tbl = XSBEngine.findall(trigger, "(.*) on (.*)", 2)[0]
  trigger = XSBEngine.findall(trigger, "(.*) on (.*)", 1)[0]
  If Message.Question("Are you sure that you want to drop trigger " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If IsNull(db.execute("DROP TRIGGER \"" & pg_escape(trigger) & "\"" & " ON \"" & pg_escape(tbl) & "\"", True)) Then
      If Message.Question("Error while dropping trigger probably due to constraints! Should I use the CASCADE option?", "Yes", "No") = 1 Then
         If IsNull(db.execute("DROP TRIGGER \"" & pg_escape(trigger) & "\"" & " ON \"" & pg_escape(tbl) & "\"" & " CASCADE")) Then
           Message.Error("Error while dropping trigger " & TreeViewMain.Current.Text & "!")
         Endif
      Endif
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDeleteDatalogRule_Click()
  ' delete the Datalog rule
  If Message.Question("Are you sure that you want to drop the Datalog rule " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    Try db.delete_datalog_rule(TreeViewMain.Current.Text)
    If Error Then
      Message.Error("Error while dropping datalog rule " & TreeViewMain.Current.Text & "!")
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuUpdateData_Click()
  ' open the table data TextEditor
  Dim tbl As String
  Dim table_updater As FormPostgreSQLEditTableData
  If TreeViewMain.Current.ParentKey = "Tables" Then
    tbl = TreeViewMain.Current.Text
    main_tabstrip.count += 1
    table_updater = New FormPostgreSQLEditTableData(FMain.main_tabstrip)
    table_updater.data_source.Connection = FMain.db.con
    table_updater.data_source.Table = tbl
    main_tabstrip.Text = tbl & " - Table"
  Endif
End

Public Sub MenuDeleteQuery_Click()
  ' delete the query
  If Message.Question("Are you sure that you want to delete query " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    If db Is Flora2DB Then
      Select Case TreeViewMain.Current.ParentKey
        Case "Insert queries"
          db.delete_query(TreeViewMain.Current.Text, "insert")
        Case "Delete queries"
          db.delete_query(TreeViewMain.Current.Text, "delete")
      End Select
    Else
      db.delete_query(TreeViewMain.Current.Text)
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDeleteCollection_Click()
  ' delete the collection
  Dim col As String
  Dim path As String[]
  If Message.Question("Are you sure that you want to delete collection " & TreeViewMain.Current.Text & "?\nAll child collections and documents will be deleted as well!", "Yes", "No") = 1 Then
    col = Mid$(TreeViewMain.Current.Key, 5)
    path = Split(col, "/")
    path.Remove(1)
    col = path.Join("/")
    If Not db.delete_object(col) Then
      Message.Error("Error while deleting collection " & TreeViewMain.Current.Text & "!")
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDeleteDocument_Click()
  ' delete the collection
  Dim doc As String
  Dim path As String[]
  If Message.Question("Are you sure that you want to delete document " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    doc = Mid$(TreeViewMain.Current.Key, 5)
    path = Split(doc, "/")
    path.Remove(1)
    doc = path.Join("/")
    If Not db.delete_object(doc) Then
      Message.Error("Error while deleting document " & TreeViewMain.Current.Text & "!")
    Endif
    db.refresh_db_tree()
  Endif
End

Public Sub MenuEditDocument_Click()
  ' delete the collection
  Dim doc As String
  Dim path As String[]
  Dim edit As FormeXistXMLEditor
  Dim i As Integer
  doc = Mid$(TreeViewMain.Current.Key, 5)
  path = Split(doc, "/")
  If path.Count > 2 Then
    path.Remove(1)
  Endif
  doc = path.Join("/")
  For i = 0 To main_tabstrip.Count - 1
    If main_tabstrip[i].Text = doc & " - XML Document" Then 
      main_tabstrip.Index = i
      Return
    Endif
  Next
  main_tabstrip.count += 1
  edit = New FormeXistXMLEditor(FMain.main_tabstrip)
  edit.path = doc
  edit.xml_editor.Text = db.get_xml_doc(doc)
  edit.but.Tooltip = "Update document"
  main_tabstrip.Text = doc & " - XML Document"
End

Public Sub MenuDeleteInsertRuleQuery_Click()
  ' delete the insert rule query
  If Message.Question("Are you sure that you want to delete query " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    db.delete_query(TreeViewMain.Current.Text, "insert rule")
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDeleteDeleteRuleQuery_Click()
  ' delete the delete rule query
  If Message.Question("Are you sure that you want to delete query " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    db.delete_query(TreeViewMain.Current.Text, "delete rule")
    db.refresh_db_tree()
  Endif
End

Public Sub MenuDeleteFlora2Query_Click()
  ' delete the flora2 query
  If Message.Question("Are you sure that you want to delete query " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
    db.delete_query(TreeViewMain.Current.Text, "flora2")
    db.refresh_db_tree()
  Endif 
End

Public Sub MenuDeleteFlora2Modules_Click()
  ' delete the flora2 module
  db.delete_module(TreeViewMain.Current.Text)
  If Message.Question("Are you sure that you want to delete module " & TreeViewMain.Current.Text & "?", "Yes", "No") = 1 Then
     db.delete_module(TreeViewMain.Current.Text)
    db.refresh_db_tree()
  Endif 
End

Public Sub TreeViewMain_DblClick()
  ' on double click open the given object
  Dim tbl, rule, head, tail As String
  Dim ht As String[]
  Dim table_updater As FormPostgreSQLEditTableData
  Dim con As Connection
  Dim i As Integer
  Dim sql_view As FormSQLSplit
  Dim datalog_view As FormDatalogSplit
  Dim datalog_module As FormXSBCreateModule
  Dim datalog_rule As FormDatalogRule
  Dim pymapreduce_split As FormPyMapReduceSplit
  Dim py_edit As FormZODBPythonEditor
  Dim py_mani As FormZODBDataManipulationEditor
  Dim ex_edit As FormeXistXMLEditor
  Dim ex_mani As FormXMLSplit
  Dim fl_edit As FormFlora2Split
  Dim fl_insert As FormFlora2InsertEditor
  Dim fl_delete As FormFlora2DeleteEditor
  Dim fl_mod As FormFlora2Editor
  ' TODO: enable opening scripts on doubleclick
  Dim sc_edit As FormScriptSplit
  If TreeViewMain.Current.ParentKey = "Modules" Then
    If db Is ZODB Then
      For i = 0 To TabStripMain.Count - 1
        If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Python Module" Then 
          FMain.main_tabstrip.Index = i
          Return
        Endif
      Next
      TabStripMain.Count += 1
      TabStripMain.Index = TabStripMain.count - 1
      py_edit = New FormZODBPythonEditor(TabStripMain)
      py_edit.pyeditor.Text = db.dbobjects["modules"][TreeViewMain.Current.Text]
      py_edit.context = " - Python Module"
      TabStripMain.Text = TreeViewMain.Current.Text & " - Python Module"
    Else
      For i = 0 To TabStripMain.Count - 1
        If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Flora2 Module" Then 
          FMain.main_tabstrip.Index = i
          Return
        Endif
      Next
      TabStripMain.Count += 1
      TabStripMain.Index = TabStripMain.count - 1
      fl_mod = New FormFlora2Editor(TabStripMain)
      fl_mod.flora2_editor.Text = db.dbobjects["flora2 modules"][TreeViewMain.Current.Text]
      fl_mod.context = " - Flora2 Module"
      TabStripMain.Text = TreeViewMain.Current.Text & " - Flora2 Module"
    Endif
  Endif
  If TreeViewMain.Current.ParentKey = "Class definitions" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Class" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    py_edit = New FormZODBPythonEditor(TabStripMain)
    py_edit.pyeditor.Text = db.dbobjects["class definitions"][TreeViewMain.Current.Text]
    py_edit.context = " - Class"
    TabStripMain.Text = TreeViewMain.Current.Text & " - Class"
  Endif
  If TreeViewMain.Current.ParentKey = "PyMapReduce queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - PyMapReduce query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    pymapreduce_split = New FormPyMapReduceSplit(TabStripMain)
    pymapreduce_split.pymapreduce_editor.Text = db.dbobjects["queries"]["pymapreduce queries"][TreeViewMain.Current.Text]
    TabStripMain.Text = TreeViewMain.Current.Text & " - PyMapReduce query"
  Endif
  If TreeViewMain.Current.ParentKey = "Datalog queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Datalog query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    datalog_view = New FormDatalogSplit(TabStripMain)
    datalog_view.datalog_editor.Text = db.dbobjects["queries"]["datalog queries"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - Datalog query"
  Endif
  If TreeViewMain.Current.ParentKey = "Datalog rules" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Datalog rule" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    datalog_rule = New FormDatalogRule(TabStripMain)
    rule = RegExp.Replace(db.dbobjects["datalog rules"][TreeViewMain.Current.Key], " [:][-] ", "$$$$$$$$$$$$$$$$")
    rule = RegExp.Replace(rule, "[/]assert ", "")
    ht = Split(rule, "$")
    head = ht[0]
    tail = ht.Pop()
    datalog_rule.head_editor.Text = head
    datalog_rule.tail_editor.Text = tail
    TabStripMain.Text = TreeViewMain.Current.Key & " - Datalog query"
  Endif
  If TreeViewMain.Current.ParentKey = "Datalog modules" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Datalog module" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    datalog_module = New FormXSBCreateModule(TabStripMain)
    datalog_module.datalog_editor.Text = db.dbobjects["datalog modules"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - Datalog module"
  Endif
  If TreeViewMain.Current.ParentKey = "SQL queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - SQL query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    sql_view = New FormSQLSplit(TabStripMain)
    sql_view.sql_editor.Text = db.dbobjects["queries"]["sql queries"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - SQL query"
  Endif
  If TreeViewMain.Current.ParentKey = "Update queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Update query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    sql_view = New FormSQLSplit(TabStripMain)
    sql_view.sql_editor.Text = db.dbobjects["queries"]["update queries"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - Update query"
  Endif
  If TreeViewMain.Current.ParentKey = "Insert queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Insert query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    If db Is ZODB Then
      py_mani = New FormZODBDataManipulationEditor(TabStripMain)
      py_mani.context = " - Insert query"
      py_mani.pyeditor.Text = db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key]
    Else
      If db Is EXistDB Then
        ex_edit = New FormeXistXMLEditor(TabStripMain)
        ex_edit.query_type = "insert"
        ex_edit.xml_editor.Text = db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key]
      Else
        If db Is Flora2DB Then
          fl_insert = New FormFlora2InsertEditor(TabStripMain)
          fl_insert.flora2_literals.Text = db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key & "_literals"]
          fl_insert.flora2_query.Text = db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key & "_query"]
          Select Case db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key & "_insop"]
            Case "insert"
              fl_insert.insert_rb.Value = True
              fl_insert.trans_chk.Value = False
            Case "insertall"
              fl_insert.insertall_rb.Value = True
              fl_insert.trans_chk.Value = False
            Case "t_insert"
              fl_insert.insert_rb.Value = True
              fl_insert.trans_chk.Value = True
            Case "t_insertall"
              fl_insert.insertall_rb.Value = True
              fl_insert.trans_chk.Value = True
          End Select
        Else
          sql_view = New FormSQLSplit(TabStripMain)
          sql_view.sql_editor.Text = db.dbobjects["queries"]["insert queries"][TreeViewMain.Current.Key]
        Endif
      Endif
    Endif
    TabStripMain.Text = TreeViewMain.Current.Key & " - Insert query"
  Endif
  If TreeViewMain.Current.ParentKey = "Delete queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Delete query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    If db Is ZODB Then
      py_mani = New FormZODBDataManipulationEditor(TabStripMain)
      py_mani.context = " - Delete query"
      py_mani.pyeditor.Text = db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key]
    Else
      If db Is EXistDB Then
        ex_edit = New FormeXistXMLEditor(TabStripMain)
        ex_edit.query_type = "delete"
        ex_edit.xml_editor.Text = db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key]
      Else
        If db Is Flora2DB Then
          fl_delete = New FormFlora2DeleteEditor(TabStripMain)
          fl_delete.flora2_literals.Text = db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key & "_literals"]
          fl_delete.flora2_query.Text = db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key & "_query"]
          Select Case db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key & "_delop"]
            Case "delete"
              fl_delete.delete_rb.Value = True
              fl_delete.trans_chk.Value = False
            Case "deleteall"
              fl_delete.deleteall_rb.Value = True
              fl_delete.trans_chk.Value = False
            Case "t_delete"
              fl_delete.delete_rb.Value = True
              fl_delete.trans_chk.Value = True
            Case "t_deleteall"
              fl_delete.deleteall_rb.Value = True
              fl_delete.trans_chk.Value = True
            Case "erase"
              fl_delete.erase_rb.Value = True
              fl_delete.trans_chk.Value = False
            Case "eraseall"
              fl_delete.eraseall_rb.Value = True
              fl_delete.trans_chk.Value = False
            Case "t_erase"
              fl_delete.erase_rb.Value = True
              fl_delete.trans_chk.Value = True
            Case "t_eraseall"
              fl_delete.eraseall_rb.Value = True
              fl_delete.trans_chk.Value = True
          End Select
        Else
          sql_view = New FormSQLSplit(TabStripMain)
          sql_view.sql_editor.Text = db.dbobjects["queries"]["delete queries"][TreeViewMain.Current.Key]
        Endif
      Endif
    Endif
    TabStripMain.Text = TreeViewMain.Current.Key & " - Delete query"
  Endif
  If TreeViewMain.Current.ParentKey = "Tables" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Table" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    tbl = TreeViewMain.Current.Text
    main_tabstrip.count += 1
    con = New Connection
    con.Type = FMain.db.con.Type
    con.Host = FMain.db.con.Host
    con.Port = FMain.db.con.Port
    con.Login = FMain.db.con.Login
    con.Password = FMain.db.con.Password
    con.Name = FMain.db.con.Name
    con.Open
    table_updater = New FormPostgreSQLEditTableData(FMain.main_tabstrip)
    table_updater.data_source.Connection = con
    Try table_updater.data_source.Table = tbl
    If Error Then
      Message.Warning("Cannot load table data!\n" & Error.Text)
    Endif
    main_tabstrip.Text = tbl & " - Table"
  Endif
  If TreeViewMain.Current.ParentKey = "Replace queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Replace query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    ex_edit = New FormeXistXMLEditor(TabStripMain)
    ex_edit.xml_editor.Text = db.dbobjects["queries"]["replace queries"][TreeViewMain.Current.Key]
    ex_edit.query_type = "replace"
    TabStripMain.Text = TreeViewMain.Current.Key & " - Replace query"
  Endif
  If TreeViewMain.Current.ParentKey = "Rename queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Rename query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    ex_edit = New FormeXistXMLEditor(TabStripMain)
    ex_edit.xml_editor.Text = db.dbobjects["queries"]["rename queries"][TreeViewMain.Current.Key]
    ex_edit.query_type = "rename"
    TabStripMain.Text = TreeViewMain.Current.Key & " - Rename query"
  Endif
  If TreeViewMain.Current.ParentKey = "Value queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Value query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    ex_edit = New FormeXistXMLEditor(TabStripMain)
    ex_edit.xml_editor.Text = db.dbobjects["queries"]["value queries"][TreeViewMain.Current.Key]
    ex_edit.query_type = "value"
    TabStripMain.Text = TreeViewMain.Current.Key & " - Value query"
  Endif
  If TreeViewMain.Current.ParentKey = "xPath queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - xPath query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    ex_mani = New FormXMLSplit(TabStripMain)
    ex_mani.xml_editor.Text = db.dbobjects["queries"]["xpath queries"][TreeViewMain.Current.Key]
    ex_mani.query_type = "xpath"
    ex_mani.path = db.dbobjects["queries"]["xpath queries paths"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - xPath query"
  Endif
  If TreeViewMain.Current.ParentKey = "xQueries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - xQuery" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    ex_mani = New FormXMLSplit(TabStripMain)
    ex_mani.xml_editor.Text = db.dbobjects["queries"]["xquery queries"][TreeViewMain.Current.Key]
    ex_mani.query_type = "xquery"
    TabStripMain.Text = TreeViewMain.Current.Key & " - xQuery"
  Endif
  With TreeViewMain.Current
    If .ParentKey = "Python" Or .ParentKey = "R" Or .ParentKey = "NodeJS" Then
      For i = 0 To TabStripMain.Count - 1
        If TabStripMain[i].Text = .Text & " - " & .ParentKey & " script" Then 
          FMain.main_tabstrip.Index = i
          Return
        Endif
      Next
      TabStripMain.Count += 1
      TabStripMain.Index = TabStripMain.count - 1
      sc_edit = New FormScriptSplit(.ParentKey, .Key, TabStripMain)
      sc_edit.editor.Text = db.dbobjects["scripts"][Lower(.ParentKey)][.Key]
      sc_edit.type = .ParentKey
      TabStripMain.Text = TreeViewMain.Current.Key & " - " & .ParentKey & " script"
    Endif
  End With
  If Left$(TreeViewMain.Current.Key, 4) = "doc_" Then
    MenuEditDocument_Click()
  Endif
  If TreeViewMain.Current.ParentKey = "Flora2 queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Flora2 query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    fl_edit = New FormFlora2Split(TabStripMain)
    fl_edit.flora2_editor.Text = db.dbobjects["queries"]["flora2 queries"][TreeViewMain.Current.Key]
    TabStripMain.Text = TreeViewMain.Current.Key & " - Flora2 query"
  Endif
  If TreeViewMain.Current.ParentKey = "Insert rule queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Insert rule query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    fl_mod = New FormFlora2Editor(TabStripMain)
    fl_mod.context = " - Insert rule query"
    fl_mod.flora2_editor.Text = db.dbobjects["queries"]["insert rule queries"][TreeViewMain.Current.Key & "_rule"]
    If db.dbobjects["queries"]["insert rule queries"][TreeViewMain.Current.Key & "_where"] Then
      fl_mod.first_chk.Value = True
    Endif
    If db.dbobjects["queries"]["insert rule queries"][TreeViewMain.Current.Key & "_load"] Then
      fl_mod.load_chk.Value = True
    Endif
    TabStripMain.Text = TreeViewMain.Current.Key & " - Insert rule query"
  Endif
  If TreeViewMain.Current.ParentKey = "Delete rule queries" Then
    For i = 0 To TabStripMain.Count - 1
      If TabStripMain[i].Text = TreeViewMain.Current.Text & " - Delete rule query" Then 
        FMain.main_tabstrip.Index = i
        Return
      Endif
    Next
    TabStripMain.Count += 1
    TabStripMain.Index = TabStripMain.count - 1
    fl_mod = New FormFlora2Editor(TabStripMain)
    fl_mod.context = " - Delete rule query"
    fl_mod.flora2_editor.Text = db.dbobjects["queries"]["delete rule queries"][TreeViewMain.Current.Key & "_rule"]
    If db.dbobjects["queries"]["insert rule queries"][TreeViewMain.Current.Key & "_where"] Then
      fl_mod.first_chk.Value = True
    Endif
    TabStripMain.Text = TreeViewMain.Current.Key & " - Delete rule query"
  Endif
End


Public Sub TreeViewMain_Expand()
  ' when expanding if the db is a ZODB, change the py/id into a real object
  ' FIXME: u drugoj razini korisnika blog ponovno pokazuje na root!?!?
  Dim object As Variant
  Dim save_key, save_dict_key As String
  If db Is ZODB Then
    save_key = TreeViewMain.Item.Key
    TreeViewMain.MoveFirst()
    Repeat
      If TreeViewMain.Item.ParentKey = save_key Then
        save_dict_key = TreeViewMain.Item.Key
        TreeViewMain.MoveChild()
        If Not IsNull(TreeViewMain.Item) Then
          If TreeViewMain.Item.Text = "py/id" Then
            TreeViewMain.MoveChild()
            object = db.query("picklers[" & TreeViewMain.Tag & "].baze_objects[" & TreeViewMain.Item.Text & "]")
            db.construct_object_tree(object, save_key, TreeViewMain)
            TreeViewMain.Remove(save_dict_key)
            TreeViewMain.MoveFirst()
          Endif
        Endif
      Endif
    Until TreeViewMain.MoveBelow()
  Endif
End

Public Sub ToolButtonNewForm_Click()
  ' Ask for form name, and open the form designer
  Dim ui As FormFormDesigner
  Dim ask As FormAskFormName
  askagain:
  ask = New FormAskFormName
  ask.caller = Me
  request_canceled = False
  ask.ShowModal()
  If Not request_canceled Then
    If Not FMain.main_treeview.Exist(form_name) Then
      FMain.main_tabstrip.Count += 1
      FMain.main_tabstrip.Index = FMain.main_tabstrip.Count - 1
      FMain.main_tabstrip.Text = form_name & " - Form"
      ui = New FormFormDesigner(FMain.main_tabstrip)
    Else
      Message.Error("Such a form name already exists! Please choose a different name.")
      Goto askagain
    Endif
  Endif
End

Public Sub TableViewApplicationElementCSS_Click()

  Print Me.main_application_css.Current.Text

End

Public Sub ToolButtonNewScript_Click()
  ' Ask for script name and type, and open the script editor
  Dim ui As FormScriptSplit
  Dim ask As FormAskScriptName
  askagain:
  ask = New FormAskScriptName
  ask.caller = Me
  request_canceled = False
  ask.ShowModal()
  If Not request_canceled Then
    If Not FMain.main_treeview.Exist(script_name) Then
      FMain.main_tabstrip.Count += 1
      FMain.main_tabstrip.Index = FMain.main_tabstrip.Count - 1
      FMain.main_tabstrip.Text = script_name & " - " & script_type & " script"
      FMain.db.new_script(script_name, " ", Lower(script_type))
      FMain.db.refresh_db_tree()
      ui = New FormScriptSplit(script_type, script_name, FMain.main_tabstrip)
    Else
      Message.Error("Such a name already exists! Please choose a different name.")
      Goto askagain
    Endif
  Endif
End

