' Gambas class file

Public store_password As Boolean 'should the password be stored in the file or asked for

Public username As String
Public password As String
Public baze_file As String
Public temporary_folder As String
Public $baze_sqlite As New Connection
Public baze_zodb As ZODBEngine
Public connection_settings As New Collection
Public dbobjects As New Collection
Public js As New JSON

Private Enum DONT_STORE, STORE, UNKNOWN

Public Sub init_folder()
  ' create a new temporary folder
  ' dump the JSON connection settings into baze.js
  ' and add a new SQLite file into baze.sqlite
  temporary_folder = Temp()
  Mkdir temporary_folder
  File.Save(temporary_folder &/ "baze.js", contoJSON())
  File.Save(temporary_folder &/ "dbobjects.js", "")
  With $baze_sqlite
    .Type = "sqlite"
    .host = temporary_folder
    .Name = ""
  End With
  $baze_sqlite.Open
  $baze_sqlite.Databases.add("baze.sqlite")
  $baze_sqlite.Close
  baze_zodb = New ZODBEngine(temporary_folder &/ "baze.fs")
  baze_zodb.connect()
  baze_zodb.close()
  Catch
    Message.Info(Error.Text)
End

Public Function contoJSON() As String
  'dump the connection settings to JSON
  Return js.Encode(Me.connection_settings)
End

Public Function dbotoJSON() As String
  'dump the database objects to JSON
  Return js.Encode(Me.dbobjects)
End


Public Sub Save()
  ' zip the temporary files to the baze file
  File.Save(temporary_folder &/ "baze.js", contoJSON())
  File.Save(temporary_folder &/ "dbobjects.js", dbotoJSON())
  Exec ["tar", "cf", baze_file, "-C", temporary_folder, "baze.sqlite", "baze.js", "dbobjects.js", "baze.fs"] Wait
End

Public Sub new_file()
  ' create a temporary folder to store the connection settings and zip it 
  ' into the specified file
  init_folder()
  initialize_dbobjects()
  Save()
End

Public Sub load_file(dbfile As String) As Variant
  ' load a given baze file and return the appropriate DB connection object
  Dim js_content, js_line As String
  Dim js_file As File
  Dim save_password As Integer = UNKNOWN  ' as in Gambas Basic is empty string is equal to null, and elements with null value are not stored in Collection, then program tries to connect to the database with default password (most likely empty string, i.e. without password) if the password for accessing database is not stored in .baze file (this way it is avoided prompting user to enter password for database that doesn't even require password)
  Dim db As Variant
  Dim please_wait As FormPleaseWait
  temporary_folder = Temp()
  Mkdir temporary_folder
  Exec ["tar", "xf", dbfile, "-C", temporary_folder] Wait
  Try js_file = Open temporary_folder &/ "baze.js" For Input
  If Error Then
    Error.Raise("This is not a valid baze file!")
  Endif
  js_content = ""
  While Not Eof(js_file)
    Line Input #js_file, js_line
    js_content &= js_line
  Wend
  connection_settings = js.Decode(js_content)
  Try js_file = Open temporary_folder &/ "dbobjects.js" For Input
  If Error Then
    Error.Raise("This is not a valid baze file!")
  Endif
  js_content = ""
  While Not Eof(js_file)
    Line Input #js_file, js_line
    js_content &= js_line
  Wend
  If Len(js_content) = 0 Or Len(js_content) = 2 Then
    initialize_dbobjects()
  Else
    dbobjects = js.Decode(js_content)
  Endif
  
  login:
  Select Case connection_settings["connection type"]
    Case "PostgreSQL"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New PostgreSQLDB(
        connection_settings["host"], 
        connection_settings["port"],
        connection_settings["dbname"], 
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "XSB"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New XSBDB(
        connection_settings["dsn"],
        connection_settings["username"], 
        password, 
        save_password,
        connection_settings["xsb"])
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      please_wait = New FormPleaseWait
      please_wait.db = db
      please_wait.silent = True
      please_wait.ShowModal
      If Not db.con.opened Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "Flora2"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New Flora2DB(
        connection_settings["dsn"],
        connection_settings["username"], 
        password, 
        save_password,
        connection_settings["flora2"])
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBEmbedded"
      db = New ZODBEmbedded(connection_settings["dbfile"])
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBFileStorage"
      db = New ZODBFileStorage(connection_settings["dbfile"]) 
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ZODBClientStorage"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New ZODBClientStorage(
        connection_settings["host"],
        connection_settings["port"],
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      db.connect()
      If Not db.engine.is_open Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "eXist"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New EXistDB(
        connection_settings["host"], 
        connection_settings["port"],
        connection_settings["username"], 
        password, 
        save_password)
      
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "SQLite"
      db = New SQLiteDB(connection_settings["dbfile"]) 
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "SQLiteEmbedded"
      db = New SQLiteDBEmbedded(connection_settings["dbfile"], connection_settings["dbfile"]) 
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "ODBC"
      db = New ODBCDB(
        connection_settings["dsn"],
        connection_settings["username"], 
        password, 
        save_password)
      db.close()
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Error.Raise("Couldn't open dbfile!")
        Quit
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    Case "MongoDB"
      If save_password <> UNKNOWN Then
        FormAskPasword.ShowModal
        password = FMain.password
        save_password = DONT_STORE
      Else
        password = connection_settings["password"]
        save_password = STORE
      Endif
      db = New MongoDB(connection_settings["host"], connection_settings["port"], connection_settings["dbname"], connection_settings["authentication dbname"], connection_settings["username"], password, save_password) 
      db.connection_settings = connection_settings
      db.dbobjects = dbobjects
      db.temporary_folder = temporary_folder
      Try db.connect()
      If Error Then
        Goto login
      Endif
      db.baze_file = dbfile
      db.Save()
      Return db
    End Select
End

Public Sub initialize_dbobjects()
  ' initialize dbobjects
  Me.dbobjects["queries"] = New Collection
  Me.dbobjects["queries"]["insert queries"] = New Collection
  Me.dbobjects["queries"]["delete queries"] = New Collection
  
  Me.dbobjects["forms"] = New Collection
  Me.dbobjects["scripts"] = New Collection
  Me.dbobjects["scripts"]["python"] = New Collection
  Me.dbobjects["scripts"]["r"] = New Collection
  Me.dbobjects["scripts"]["nodejs"] = New Collection
  Me.dbobjects["reports"] = New Collection
  Select Case connection_settings["connection type"]
    Case "PostgreSQL", "SQLite", "SQLiteEmbedded", "ODBC"
      Me.dbobjects["queries"]["sql queries"] = New Collection
      Me.dbobjects["queries"]["qbe queries"] = New Collection
      Me.dbobjects["queries"]["datalog queries"] = New Collection
      Me.dbobjects["queries"]["update queries"] = New Collection
      Me.dbobjects["datalog modules"] = New Collection
      Me.dbobjects["datalog rules"] = New Collection
    Case "XSB"
      Me.dbobjects["queries"]["sql queries"] = New Collection
      Me.dbobjects["queries"]["datalog queries"] = New Collection
      Me.dbobjects["datalog modules"] = New Collection
    Case "Flora2"
      Me.dbobjects["queries"]["flora2 queries"] = New Collection
      Me.dbobjects["queries"]["insert rule queries"] = New Collection
      Me.dbobjects["queries"]["delete rule queries"] = New Collection
      Me.dbobjects["flora2 modules"] = New Collection
    Case "ZODBEmbedded", "ZODBClientStorage", "ZODBFileStorage"
      Me.dbobjects["queries"]["pymapreduce queries"] = New Collection
      Me.dbobjects["class definitions"] = New Collection
      Me.dbobjects["modules"] = New Collection
    Case "eXist"
      Me.dbobjects["queries"]["replace queries"] = New Collection
      Me.dbobjects["queries"]["value queries"] = New Collection
      Me.dbobjects["queries"]["rename queries"] = New Collection
      Me.dbobjects["queries"]["xpath queries"] = New Collection
      Me.dbobjects["queries"]["xpath queries paths"] = New Collection
      Me.dbobjects["queries"]["xquery queries"] = New Collection
    Case "MongoDB"
      Me.dbobjects["queries"]["find queries"] = New Collection
      Me.dbobjects["queries"]["update queries"] = New Collection
  End Select
End

Public Sub delete_query(query As String, Optional type As String)
  ' delete the query and refresh
  Dim a As String
  Dim o As Collection
  If False Then
    Print type
  Endif
  For Each o In Me.dbobjects["queries"]
    For Each a In o
      If o.key = query Then
        o[o.key] = Null
        Me.Save
        Return
      Endif
    Next
  Next
End

Public Sub connect(Optional caller As Object = Null)
  ' Connect to database
  ' NOP / Must be overriden in child class
  
  
End

Public Sub run_query(query_name As String) As Variant
  ' Run a query by its name and return the results
  Dim queries As Collection
  Dim q As String
  Dim results As Variant
  For Each queries In Me.dbobjects["queries"]
    If queries.Exist(query_name) Then
      q = queries[query_name]
      ' TODO: implement missing query types
      Select Me.dbobjects["queries"].Key
        Case "sql queries", "qbe queries"
          Return FMain.db.execute(q, True)
        Case "datalog queries"
          Return FMain.db.executeDatalog(q, False)
        Case "flora2 queries"
          Return FMain.db.query(q)
        Case "pymapreduce queries"
          Return FMain.db.query(q)
        Case "xquery queries"
          Return Me.query(q)
        Case "delete queries"
          Try Return FMain.db.new_delete_query(query_name, q)
          If Error Then
            ' no such function, try something else (execute for PGSQL et al., look for other query parts in Flora2
            Try Return FMain.db.execute(q, True)
            If Error Then
              ' OK, this is not an PSQL query, so it must be Flora2
              
            Endif
          Endif
        Case "insert queries"
          Try Return FMain.db.new_insert_query(query_name, q)
          If Error Then
            ' no such function, try something else (execute for PGSQL et al., look for other query parts in Flora2
            Try Return FMain.db.execute(q, True)
            If Error Then
              ' OK, this is not an PSQL query, so it must be Flora2
              
            Endif
          Endif
       End Select
     Endif
  Next
  
End

Public Sub new_script(ttitle As String, tcode As String, ttype As String)
  ' create new script and store it in dbobjects
  Print "1: " & ttitle
  Print "2: " & tcode
  Print "3: " & ttype
  Me.dbobjects["scripts"][Lower(ttype)][ttitle] = tcode
  Me.Save()
End
